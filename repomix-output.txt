This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-24T21:51:12.831Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.vercel/project.json
.vercel/README.txt
backend/.gitignore
backend/auth.js
backend/authController.js
backend/authMiddleware.js
backend/authServer.js
backend/db.js
backend/formController.js
backend/package.json
backend/requests.rest
backend/self_guide.md
backend/server.js
backend/user.js
backend/vercel.json
documentation/internship_register_documentation.md
frontend/.gitignore
frontend/package.json
frontend/public/index.html
frontend/public/manifest.json
frontend/public/robots.txt
frontend/src/App.css
frontend/src/App.js
frontend/src/App.test.js
frontend/src/axios.js
frontend/src/component/Common/Sidebar/Sidebar.css
frontend/src/component/Common/Sidebar/SideBar.js
frontend/src/component/Common/Sidebar/SideBarAdmin.css
frontend/src/component/Common/Sidebar/SideBarAdmin.js
frontend/src/component/Common/Sidebar/SideBarStudent.css
frontend/src/component/Common/Sidebar/SideBarStudent.js
frontend/src/component/Common/TopNav/TopNav.css
frontend/src/component/Common/TopNav/TopNav.js
frontend/src/component/Common/TopNav/TopNavAdmin.css
frontend/src/component/Common/TopNav/TopNavAdmin.js
frontend/src/component/Common/TopNav/TopNavStudent.css
frontend/src/component/Common/TopNav/TopNavStudent.js
frontend/src/component/Login/Login.css
frontend/src/component/Login/Login.js
frontend/src/component/Signup/Signup.css
frontend/src/component/Signup/Signup.js
frontend/src/index.css
frontend/src/index.js
frontend/src/layout/MainLayout.css
frontend/src/layout/MainLayout.js
frontend/src/logo.svg
frontend/src/pages/AdminDashboard/DashboardAdmin/DashboardAdmin.css
frontend/src/pages/AdminDashboard/DashboardAdmin/DashboardAdmin.js
frontend/src/pages/AdminDashboard/DashboardAdmin/DocumentEditAdmin.css
frontend/src/pages/AdminDashboard/DashboardAdmin/DocumentEditAdmin.js
frontend/src/pages/AdminDashboard/DashboardAdmin/WorkManagerAdmin.css
frontend/src/pages/AdminDashboard/DashboardAdmin/WorkManagerAdmin.js
frontend/src/pages/AdminDashboard/FormManager/FormManager.css
frontend/src/pages/AdminDashboard/FormManager/FormManager.js
frontend/src/pages/AdminDashboard/ManagerUser/Preview.js
frontend/src/pages/AdminDashboard/ManagerUser/StatisticsPage.css
frontend/src/pages/AdminDashboard/ManagerUser/StatisticsPage.js
frontend/src/pages/AdminDashboard/ManagerUser/UserManager.css
frontend/src/pages/AdminDashboard/ManagerUser/UserManager.js
frontend/src/pages/AdminDashboard/ManagerUser/UserManagerStudent.css
frontend/src/pages/AdminDashboard/ManagerUser/UserManagerStudent.js
frontend/src/pages/AdminDashboard/ManagerUser/UserManagerSupervisor.css
frontend/src/pages/AdminDashboard/ManagerUser/UserManagerSupervisor.js
frontend/src/pages/AdminDashboard/Setting/AdminSetting.css
frontend/src/pages/AdminDashboard/Setting/AdminSetting.js
frontend/src/pages/StudentDashboard/DashboardStudent/Dashboard.css
frontend/src/pages/StudentDashboard/DashboardStudent/Dashboard.js
frontend/src/pages/StudentDashboard/DashboardStudent/DocumentEdit.css
frontend/src/pages/StudentDashboard/DashboardStudent/DocumentEdit.js
frontend/src/pages/StudentDashboard/DashboardStudent/WorkManager.css
frontend/src/pages/StudentDashboard/DashboardStudent/WorkManager.js
frontend/src/pages/StudentDashboard/Document/Document.css
frontend/src/pages/StudentDashboard/Document/Document.js
frontend/src/pages/StudentDashboard/Information/api.js
frontend/src/pages/StudentDashboard/Information/CompanyDetail.css
frontend/src/pages/StudentDashboard/Information/CompanyDetail.js
frontend/src/pages/StudentDashboard/Information/ExternalSupervisorDetail.css
frontend/src/pages/StudentDashboard/Information/ExternalSupervisorDetail.js
frontend/src/pages/StudentDashboard/Information/Information.css
frontend/src/pages/StudentDashboard/Information/Information.js
frontend/src/pages/StudentDashboard/Information/InternalSupervisorDetail.css
frontend/src/pages/StudentDashboard/Information/InternalSupervisorDetail.js
frontend/src/pages/StudentDashboard/Information/StudentDetail.css
frontend/src/pages/StudentDashboard/Information/StudentDetail.js
frontend/src/pages/StudentDashboard/PreviewDocument/PreviewDocument.js
frontend/src/pages/StudentDashboard/Setting/Setting.css
frontend/src/pages/StudentDashboard/Setting/Setting.js
frontend/src/pages/StudentDashboard/Setting/UpdateInfo.css
frontend/src/pages/StudentDashboard/Setting/UpdateInfo.js
frontend/src/reportWebVitals.js
frontend/src/setupTests.js
frontend/src/test.js

================================================================
Repository Files
================================================================

================
File: .vercel/project.json
================
{"projectId":"prj_jQawGpga9JGcdojLOECj0ZSKe2fn","orgId":"team_tXaABvRRybV0O2TKKXXsR6WZ"}

================
File: .vercel/README.txt
================
> Why do I have a folder named ".vercel" in my project?
The ".vercel" folder is created when you link a directory to a Vercel project.

> What does the "project.json" file contain?
The "project.json" file contains:
- The ID of the Vercel project that you linked ("projectId")
- The ID of the user or team your Vercel project is owned by ("orgId")

> Should I commit the ".vercel" folder?
No, you should not share the ".vercel" folder with anyone.
Upon creation, it will be automatically added to your ".gitignore" file.

================
File: backend/.gitignore
================
node_modules
.env

================
File: backend/auth.js
================
const express = require("express");
const { login } = require("../backend/authController");

const router = express.Router();

router.post("/login", login);

module.exports = router;

================
File: backend/authController.js
================
const jwt = require('jsonwebtoken');
const db = require('./db');
const User = require("../backend/user");

let refreshTokens = [];

const login = async (req, res) => {
    const { username, password } = req.body;
  
    try {
      const user = await User.findByUsername(username);
      if (!user) return res.status(401).json({ error: "Invalid username or password" });
  
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) return res.status(401).json({ error: "Invalid username or password" });
  
      const token = jwt.sign({ username: user.username, role: user.role }, process.env.JWT_SECRET, {
        expiresIn: "1h",
      });
  
      res.json({ token });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: "Database error" });
    }
  };
  
  module.exports = { login };

const generateAccessToken = (user) => {
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '30s' });
};

const tokenController = (req, res) => {
    const refreshToken = req.body.token;

    if (!refreshToken) return res.sendStatus(401); // Thiếu Refresh Token
    if (!refreshTokens.includes(refreshToken)) return res.sendStatus(403); // Token không hợp lệ

    jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403); // Token hết hạn hoặc không hợp lệ

        // Tạo lại Access Token
        const accessToken = generateAccessToken({ userId: user.userId, username: user.username, role: user.role });
        res.json({ accessToken });
    });
};

const logoutController = (req, res) => {
    const refreshToken = req.body.token;

    if (!refreshToken) {
        return res.status(400).json({ message: 'Thiếu Refresh Token' });
    }

    // Loại bỏ token khỏi danh sách
    refreshTokens = refreshTokens.filter(token => token !== refreshToken);

    res.sendStatus(204); // Thành công, không có nội dung trả về
};

const loginController = async (req, res) => {
    const { username, password } = req.body;

    try {
        // Truy vấn thông tin người dùng từ database
        const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);

        // Kiểm tra nếu không tìm thấy người dùng
        if (rows.length === 0) {
            return res.status(404).json({ message: 'Tên đăng nhập không tồn tại' });
        }

        const user = rows[0];

        // Kiểm tra mật khẩu
        const isMatch = await bcrypt.compare(password, user.password_hash);
        if (!isMatch) {
            return res.status(401).json({ message: 'Mật khẩu không chính xác' });
        }

        // Tạo Access Token và Refresh Token
        const accessToken = generateAccessToken({ userId: user.user_id, username: user.username, role: user.role });
        const refreshToken = jwt.sign({ userId: user.user_id, username: user.username, role: user.role }, process.env.REFRESH_TOKEN_SECRET);

        // Lưu Refresh Token vào danh sách hoặc cơ sở dữ liệu (nếu cần)
        refreshTokens.push(refreshToken);

        // Trả về token cho client
        res.json({ accessToken, refreshToken });
    } catch (error) {
        console.error('Lỗi khi xử lý đăng nhập:', error);
        res.status(500).json({ message: 'Lỗi máy chủ' });
    }
};

module.exports = {
    tokenController,
    logoutController,
    loginController
};

================
File: backend/authMiddleware.js
================
const jwt = require('jsonwebtoken');

const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) return res.sendStatus(401);

    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

module.exports = authenticateToken;

================
File: backend/authServer.js
================
require('dotenv').config()

const express = require('express')
const app = express()

const jwt = require('jsonwebtoken')

app.use(express.json())

let refreshTokens = []       

app.post('/token', (req, res) => {
    const refreshToken = req.body.token
    if (refreshToken == null) return res.sendStatus(401)
    if (!refreshTokens.includes(refreshToken)) return res.sendStatus(403)      
    jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403)
        const accessToken = generateAccessToken({name: user.name})       
        res.json({ accessToken: accessToken})
    })
})

app.delete('/logout', (req, res) => {
    refreshTokens = refreshTokens.filter(token => token !== req.body.token);
    res.sendStatus(204);
});

app.post('/login', (req, res) => {

    const username = req.body.username
    const user = {name:username}

    const accessToken = generateAccessToken(user)
    const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET)
    refreshTokens.push(refreshToken)
    res.json({accessToken: accessToken, refreshToken : refreshToken})
})

function generateAccessToken(user){
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: '30s'}) 
}

const posts = [
    {
        username: 'Saul',
        title: 'Goodman'
    },
    {
        username: 'Kim',
        title: 'Wexler'
    }
]

app.listen(3000)

================
File: backend/db.js
================
require('dotenv').config();
const mysql = require('mysql2');

// Cấu hình kết nối
const pool = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: process.env.DB_PORT
});

// Tạo kết nối promise
const db = pool.promise();

// Kiểm tra kết nối
async function testConnection() {
    try {
        // Thực hiện một truy vấn đơn giản
        const [rows] = await db.query('SELECT 1');
        console.log('Kết nối database thành công!');
        
        // Log thông tin kết nối
        console.log('Thông tin kết nối:');
        console.log(`- Database: ${process.env.DB_NAME}`);
        console.log(`- Host: ${process.env.DB_HOST}`);
        console.log(`- Port: ${process.env.DB_PORT}`);
    } catch (error) {
        console.error('Lỗi kết nối database:', error.message);
    }
}

// Chạy kiểm tra
testConnection();

module.exports = db;

================
File: backend/formController.js
================
const { v4: uuidv4 } = require('uuid');
let forms = [];

const createFormController = (req, res) => {
    const { name, description, fields } = req.body;

    if (!name || !fields || !Array.isArray(fields)) {
        return res.status(400).json({ message: 'Invalid input data. Name and fields are required.' });
    }

    const newForm = {
        id: uuidv4(),
        name,
        description: description || '',
        fields,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    };

    forms.push(newForm);
    res.status(201).json(newForm);
};

const getFormByIdController = (req, res) => {
    const { id } = req.params;
    const form = forms.find(f => f.id === id);

    if (!form) {
        return res.status(404).json({ message: 'Form not found.' });
    }

    res.json(form);
};

const updateFormController = (req, res) => {
    const { id } = req.params;
    const { name, description, fields } = req.body;

    const form = forms.find(f => f.id === id);
    if (!form) {
        return res.status(404).json({ message: 'Form not found.' });
    }

    if (name) form.name = name;
    if (description) form.description = description;
    if (fields && Array.isArray(fields)) form.fields = fields;

    form.updatedAt = new Date().toISOString();

    res.json(form);
};

const deleteFormController = (req, res) => {
    const { id } = req.params;
    const index = forms.findIndex(f => f.id === id);

    if (index === -1) {
        return res.status(404).json({ message: 'Form not found.' });
    }

    forms.splice(index, 1);
    res.status(204).send();
};

module.exports = {
    createFormController,
    getFormByIdController,
    updateFormController,
    deleteFormController
};

================
File: backend/package.json
================
{
  "name": "group34---internship-editing-form-application",
  "version": "1.0.0",
  "description": "Group Info\r ==============================\r * Group ID: *34*\r * Project Name: *Internship Form Edit Online*",
  "main": "index.js",
  "scripts": {
    "devStart": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.11.4",
    "nodemon": "^3.1.7",
    "uuid": "^11.0.3"
  }
}

================
File: backend/requests.rest
================
GET http://localhost:3000/posts
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU2F1bCIsImlhdCI6MTczMjA4ODg4NCwiZXhwIjoxNzMyMDg4OTE0fQ.PlLIKtd06M8NY3VBr3lppQMP7ZmSuhdAQ-Fv0HHwDAk
###
DELETE http://localhost:3000/logout
Content-Type: application/json

{
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU2F1bCIsImlhdCI6MTczMjA4ODg0N30.Hxby5vEcF7wOuEiu2gwDOfcis86GiiOS2bEIesq1RTM"
}

###
POST http://localhost:3000/token
Content-Type: application/json

{
    "token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU2F1bCIsImlhdCI6MTczMjA4ODg0N30.Hxby5vEcF7wOuEiu2gwDOfcis86GiiOS2bEIesq1RTM"
}

###
POST http://localhost:3000/login
Content-Type: application/json

{
    "username": "Saul"
}

###
GET http://localhost:3000/

###
POST https://groupproject34.vercel.app/login
Content-Type: application/json

{
    "username": "Saul"
}

###
GET http://localhost:3000/forms/abcxyz

###
POST http://localhost:3000/forms/
Content-Type: application/json

{
  "name": "Internship Application Form",
  "description": "A form for internship applications",
  "fields": [
    { "label": "Name", "type": "text", "required": true },
    { "label": "Email", "type": "email", "required": true },
    { "label": "Resume", "type": "file", "required": false }
  ]
}

###
GET http://localhost:3000/forms/978ca102-4c54-48fb-9a0e-08b1de453db4

================
File: backend/self_guide.md
================
// "###": below will be a different request in .rest file
install REST client to use .rest file https://marketplace.visualstudio.com/items?itemName=humao.rest-client


----------------------------------------------------
authServer.js guide

require('dotenv').config()

const express = require('express')
const app = express()

const jwt = require('jsonwebtoken')

app.use(express.json())

const refreshTokens = []        //shoudn't do "let" to any project, server restart, the stored data will be whiped out

app.post('/token', (req, res) => {
    const refreshToken = req.body.token
    if (refreshToken == null) return res.sendStatus(401)
    if (!refreshTokens.includes(refreshToken)) return res.sendStatus(403)      //check if we do have a valid refresh token or if we already removed the refresh token, if not, send error status
    jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
        if (err) return res.sendStatus(403)
        const accessToken = generateAccessToken({name: user.name})       //user: will contain additional information such as token date 
        res.json({ accessToken: accessToken})
    })    // verify the refresh token after bypass
})

app.delete('/logout', (req, res) => {
    refreshTokens = refreshTokens.filter(token => token !== req.body.token);
    res.sendStatus(204);
});

app.post('/login', (req, res) => {
    // authenticate user

    const username = req.body.username
    const user = {name:username}

    const accessToken = generateAccessToken(user)
    const refreshToken = jwt.sign(user, process.env.REFRESH_TOKEN_SECRET)
    refreshTokens.push(refreshToken)
    res.json({accessToken: accessToken, refreshToken : refreshToken})
})

function generateAccessToken(user){
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: '30s'}) //set timer for the token
}

const posts = [
    {
        username: 'Saul',
        title: 'Goodman'
    },
    {
        username: 'Kim',
        title: 'Wexler'
    }
]

app.listen(4000)
-------------------------------------------------

================
File: backend/server.js
================
require('dotenv').config();
const express = require('express');
const app = express();
const cors = require('cors');
app.use(express.json());

const { tokenController, logoutController, loginController } = require('./authController');
const { createFormController, getFormByIdController, updateFormController, deleteFormController } = require('./formController');
const authenticateToken = require('./authMiddleware');

app.post('/token', tokenController);

app.delete('/logout', logoutController);

app.post('/login', loginController);

const posts = [
    { username: 'Saul',password: 'saul123', title: 'Goodman' },
    { username: 'Kim',password: 'kim456', title: 'Wexler' }
];

app.get('/posts', authenticateToken, (req, res) => {
    res.json(posts.filter(post => post.username === req.user.name));
});

app.post('/forms', createFormController);

app.get('/forms/:id', getFormByIdController);

app.put('/forms/:id', updateFormController);

app.delete('/forms/:id', deleteFormController);

app.get('/', (req, res) => {
    res.json('Hello, World!');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

// Cấu hình CORS
app.use(cors({
    origin: 'http://localhost:3000/', // Chỉ cho phép frontend từ localhost:3000
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  }));

================
File: backend/user.js
================
const db = require("./db");

class User {
  // Tìm người dùng theo username
  static async findByUsername(username) {
    const [rows] = await db.query("SELECT * FROM users WHERE username = ?", [username]);
    return rows[0];
  }

  // Tạo người dùng mới
  static async create({ username, password, role }) {
    const [result] = await db.query(
      "INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
      [username, password, role]
    );
    return result.insertId;
  }
}

module.exports = User;

================
File: backend/vercel.json
================
{
    "version": 2,
    "builds": [
      { "src": "server.js", "use": "@vercel/node" }
    ],
    "routes": [
      { "src": "/(.*)", "dest": "server.js" }
    ]
  }

================
File: documentation/internship_register_documentation.md
================
# Database Documentation

### 1. `users` Table
Stores general information about users (admin, students, internal and external supervisors, and companies).

| Field Name   | Data Type  | Description                             |
|--------------|------------|-----------------------------------------|
| id           | INT        | Unique identifier for each user.        |
| username     | VARCHAR(50)| Username of the user.                   |
| password     | VARCHAR(255)| Password for the user.                 |
| email        | VARCHAR(100)| Email address of the user.             |
| role         | ENUM       | Role of the user (admin, student, supervisor, company). |

### 2. `students` Table
Contains information about students who are registering for internships.

| Field Name   | Data Type  | Description                             |
|--------------|------------|-----------------------------------------|
| id           | INT        | Unique identifier for each student.     |
| name         | VARCHAR(100)| Name of the student.                   |
| date_of_birth| DATE       | Birthdate of the student.               |
| student_id   | VARCHAR(20)| Unique student ID.                      |
| major        | VARCHAR(100)| Major or course of study.              |
| school_year  | INT        | Year of study (e.g., 1, 2, 3, 4).        |
| email        | VARCHAR(100)| Email address of the student.          |
| phone_number | VARCHAR(20)| Contact number of the student.         |
| user_id      | INT        | FK to `users` table (user information). |

### 3. `internal_supervisors` Table
Stores information about internal supervisors who are guiding students during their internships.

| Field Name   | Data Type  | Description                             |
|--------------|------------|-----------------------------------------|
| id           | INT        | Unique identifier for each supervisor.  |
| name         | VARCHAR(100)| Name of the supervisor.                |
| work_unit    | VARCHAR(100)| Department or unit the supervisor belongs to. |
| email        | VARCHAR(100)| Email address of the supervisor.       |
| phone_number | VARCHAR(20)| Contact number of the supervisor.      |
| user_id      | INT        | FK to `users` table (user information). |

### 4. `external_supervisors` Table
Stores information about external supervisors who are guiding students during their internships from partnering companies.

| Field Name   | Data Type  | Description                             |
|--------------|------------|-----------------------------------------|
| id           | INT        | Unique identifier for each external supervisor. |
| name         | VARCHAR(100)| Name of the supervisor.                |
| work_unit    | VARCHAR(100)| Company or organization the supervisor works for. |
| position     | VARCHAR(100)| Position of the external supervisor.   |
| email        | VARCHAR(100)| Email address of the supervisor.       |
| phone_number | VARCHAR(20)| Contact number of the supervisor.      |
| user_id      | INT        | FK to `users` table (user information). |

### 5. `companies` Table
Stores information about companies offering internship opportunities.

| Field Name   | Data Type  | Description                             |
|--------------|------------|-----------------------------------------|
| id           | INT        | Unique identifier for each company.     |
| name         | VARCHAR(100)| Name of the company.                   |
| address      | VARCHAR(255)| Address of the company.                |
| email        | VARCHAR(100)| Email address of the company.          |
| phone_number | VARCHAR(20)| Contact number of the company.         |
| user_id      | INT        | FK to `users` table (user information). |

## Relationships Between Tables
The following relationships exist between the tables:

- **Users** table has a **one-to-one** relationship with the **students**, **internal_supervisors**, **external_supervisors**, and **companies** tables.
  - The `user_id` in each of these tables references the `id` of the `users` table as a foreign key.

### Key Relationships:
- A **student** belongs to a **user** (through `user_id`).
- An **internal supervisor** belongs to a **user** (through `user_id`).
- An **external supervisor** belongs to a **user** (through `user_id`).
- A **company** belongs to a **user** (through `user_id`).


![ERD Diagram][def]
[def]: erd.drawio.png

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/package.json
================
{
  "name": "gp34",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "bootstrap": "^5.3.3",
    "chart.js": "^4.4.7",
    "docx": "^9.0.3",
    "docxtemplater": "^3.53.0",
    "file-saver": "^2.0.5",
    "jszip": "^3.10.1",
    "mammoth": "^1.8.0",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.5",
    "react-calendar": "^5.1.0",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.3.1",
    "react-quill": "^2.0.0",
    "react-router-dom": "^6.28.0",
    "react-scripts": "^5.0.1",
    "react-select": "^5.8.3",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11"
  }
}

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Student Management System</title>
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <!-- Thêm các file CSS khác nếu cần -->
  </head>
  <body>
    <!-- Trang sẽ được render vào đây -->
    <div id="root"></div>

    <!-- Thêm các script nếu cần -->
  </body>
</html>

================
File: frontend/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: frontend/src/App.css
================
.App {
  font-family: Arial, sans-serif;
}

================
File: frontend/src/App.js
================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Login from "./component/Login/Login";
import SignUp from "./component/Signup/Signup";
import MainLayout from "./layout/MainLayout"; 

import DashboardStudent from "./pages/StudentDashboard/DashboardStudent/Dashboard";
import DashboardAdmin from "./pages/AdminDashboard/DashboardAdmin/DashboardAdmin";
import Document from "./pages/StudentDashboard/Document/Document";
import DocumentEditAdmin from "./pages/AdminDashboard/DashboardAdmin/DocumentEditAdmin";
import WorkManagerAdmin from "./pages/AdminDashboard/DashboardAdmin/WorkManagerAdmin";
import UserManager from "./pages/AdminDashboard/ManagerUser/UserManager";

import UpdateInfo from "./pages/StudentDashboard/Setting/UpdateInfo";
import StudentDetail from "./pages/StudentDashboard/Information/StudentDetail";
import ExternalSupervisorDetail from "./pages/StudentDashboard/Information/ExternalSupervisorDetail";
import InternalSupervisorDetail from "./pages/StudentDashboard/Information/InternalSupervisorDetail";
import CompanyDetail from "./pages/StudentDashboard/Information/CompanyDetail";
import PreviewDocument from "./pages/StudentDashboard/PreviewDocument/PreviewDocument";
import Information from "./pages/StudentDashboard/Information/Information";
import Setting from "./pages/StudentDashboard/Setting/Setting";
import StatisticsPage from "./pages/AdminDashboard/ManagerUser/StatisticsPage";
import PreviewPage from "./pages/AdminDashboard/ManagerUser/Preview";
import DocumentEdit from "./pages/StudentDashboard/DashboardStudent/DocumentEdit";
import UserManagerStudent from "./pages/AdminDashboard/ManagerUser/UserManagerStudent";
import UserManagerSupervisor from "./pages/AdminDashboard/ManagerUser/UserManagerSupervisor";
import AdminSetting from "./pages/AdminDashboard/Setting/AdminSetting";
import FormManager from "./pages/AdminDashboard/FormManager/FormManager";
function App() {
  console.log(MainLayout)
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/signup" element={<SignUp />} />
        <Route path="/student-dashboard" element={<MainLayout role="Student" />}>
          <Route index element={<DashboardStudent />} />
          <Route path="home" element={<DashboardStudent />} />
          <Route path="/student-dashboard/document-edit/:id" element={<DocumentEdit />} />
          <Route path="document" element={<Document />} />
          <Route path="previewdocument" element={<PreviewDocument />} />
          <Route path="information" element={<Information />} />
          <Route path="setting" element={<Setting />} />
          <Route path="setting/update-info" element={<UpdateInfo />} />
          <Route path="student-detail" element={<StudentDetail />} />
          <Route path="external-detail" element={<ExternalSupervisorDetail />} />
          <Route path="internal-detail" element={<InternalSupervisorDetail />} />
          <Route path="company-detail" element={<CompanyDetail />} />

        
        </Route>
        

        
        <Route path="/admin-dashboard" element={<MainLayout role="Admin" />}>
          <Route index element={<DashboardAdmin />} />
          <Route path="home" element={<DashboardAdmin />} />
          <Route path="document" element={<DocumentEditAdmin />} />
          <Route path="work-manager" element={<WorkManagerAdmin />} />
          <Route path="manager-user" element={<UserManager />} />
          <Route path="user-manager-student" element={<UserManagerStudent />} />
          <Route path="user-manager-supervisor" element={<UserManagerSupervisor />} />
          <Route path="statistics-page" element={<StatisticsPage />} />
          <Route path="preview-page" element={<PreviewPage />} />
          <Route path="settings" element={<AdminSetting />} />
          <Route path="/admin-dashboard/form-manager" element={<FormManager />} />
          
        </Route>

        
      </Routes>
    </Router>
  );
}

export default App;

================
File: frontend/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: frontend/src/axios.js
================
import axios from "axios";

const instance = axios.create({
  baseURL: "http://localhost:3000/auth", // API backend
});

export default instance;

================
File: frontend/src/component/Common/Sidebar/Sidebar.css
================
.sidebar {
  width: 350px;
  background-color: #1976D2; 
  padding: 20px;
  box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.1);
}


.section h3 {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 10px;
  color: #ffffff; 
}


.sidebar-item {
  padding: 8px 12px;
  cursor: pointer;
  border-radius: 4px;
  background-color: #1565C0; 
  color: #ffffff; 

}

.sidebar-item:hover {
  background-color: #1E88E5; 
}

.sidebar-item.active {
  background-color: #42A5F5; 
  color: #ffffff; 
}


.submenu {
  padding-left: 20px;
  margin-top: 5px;
}

.submenu a {
  display: block;
  padding: 5px 0;
  text-decoration: none;
  color: #ffffff; 
}

.submenu a:hover {
  background-color: #64B5F6; 
}

================
File: frontend/src/component/Common/Sidebar/SideBar.js
================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './Sidebar.css';

function Sidebar() {
  const [activeYear, setActiveYear] = useState(null);

  const documents = {
    active: {
      "2019": ["Proposal", "Giấy xác nhận thực tập", "Hợp đồng với supervisor", "Hợp đồng với công ty"],
      "2020": ["Proposal", "Giấy xác nhận thực tập", "Hợp đồng với supervisor", "Hợp đồng với công ty"],
      "2021": ["Proposal", "Giấy xác nhận thực tập", "Hợp đồng với supervisor", "Hợp đồng với công ty"],
      "2022": ["Proposal", "Giấy xác nhận thực tập", "Hợp đồng với supervisor", "Hợp đồng với công ty"],
      "2023": ["Proposal", "Giấy xác nhận thực tập", "Hợp đồng với supervisor", "Hợp đồng với công ty"],
      "2024": ["Proposal", "Giấy xác nhận thực tập", "Hợp đồng với supervisor", "Hợp đồng với công ty"]
    },
    other: {
      "2019": ["Other document 1", "Other document 2"],
      "2020": ["Other document 1", "Other document 2"],
      "2021": ["Other document 1", "Other document 2"],
      "2022": ["Other document 1", "Other document 2"],
      "2023": ["Other document 1", "Other document 2"],
      "2024": ["Other document 1", "Other document 2"]
    }
  };

  const toggleYear = (year) => {
    setActiveYear(activeYear === year ? null : year);
  };

  return (
    <div className="sidebar">
      
      <div className="section">
        <h3>Giấy tờ đang hoạt động</h3>
        {Object.keys(documents.active).map((year) => (
          <div key={year}>
            <div
              className={`sidebar-item ${activeYear === year ? 'active' : ''}`}
              onClick={() => toggleYear(year)}
            >
              <span>{year}</span>
            </div>
            {activeYear === year && (
              <div className="submenu">
                {documents.active[year].map((doc) => (
                  <Link to={`/documents/${year}/${doc}`} key={doc}>{doc}</Link>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Section for other documents */}
      <div className="section">
        <h3>Giấy tờ khác</h3>
        {Object.keys(documents.other).map((year) => (
          <div key={year}>
            <div
              className={`sidebar-item ${activeYear === year ? 'active' : ''}`}
              onClick={() => toggleYear(year)}
            >
              <span>{year}</span>
            </div>
            {activeYear === year && (
              <div className="submenu">
                {documents.other[year].map((doc) => (
                  <Link to={`/documents/${year}/${doc}`} key={doc}>{doc}</Link>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

export default Sidebar;

================
File: frontend/src/component/Common/Sidebar/SideBarAdmin.css
================
.sidebar-admin {
  width: 250px;
  border-radius: 8px;
  background-color: #1976D2; 
  padding: 20px;
  box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.1);
}


.sidebar-admin .section h3 {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 10px;
  color: #ffffff;
}


.sidebar-admin .sidebar-item {
  padding: 8px 12px;
  cursor: pointer;
  border-radius: 4px;
  background-color: #1565C0; 
  color: #ffffff;
  margin-bottom: 10px;
}


.sidebar-admin .sidebar-item:hover {
  background-color: #1E88E5;
}

.sidebar-admin .sidebar-item.active {
  background-color: #42A5F5;
  color: #ffffff;
}


.sidebar-admin .submenu {
  padding-left: 20px; 
  margin-top: 5px;
   
}


.sidebar-admin .submenu.active {
  display: block;
}


.sidebar-admin .submenu a {
  display: block;
  padding: 5px 0;
  text-decoration: none;
  color: #ffffff;
  padding-left: 10px; 
}


.sidebar-admin .submenu a:hover {
  background-color: #64B5F6;
}


.sidebar-admin .submenu-item {
  padding-left: 20px; 
  cursor: pointer;
}


.sidebar-admin .submenu-item:hover {
  background-color: #1E88E5;
}


.sidebar-admin .submenu-subchildren a {
  padding-left: 40px; 
}

================
File: frontend/src/component/Common/Sidebar/SideBarAdmin.js
================
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import './SideBarAdmin.css';

function SideBarAdmin() {
  const location = useLocation();
  const [activeSection, setActiveSection] = useState(null);
  const [activeSubSection, setActiveSubSection] = useState(null);

  
  const adminSections = {
    userManager: {
      label: 'User Management',
      links: [
        {
          path: '/admin-dashboard/user-manager-supervisor',
          label: 'Supervisors',
          children: [
            { path: '/admin-dashboard/statistics-page', label: 'Statistics' },
            { path: '/admin-dashboard/preview-page', label: 'Preview' },
          ],
        },
        {
          path: '/admin-dashboard/user-manager-student',
          label: 'Students',
          children: [
            { path: '/admin-dashboard/statistics-page', label: 'Statistics' },
            { path: '/admin-dashboard/preview-page', label: 'Preview' },
          ],
        },
      ],
    },
    formManager: {
      label: 'Form Management',
      links: [
        { path: '/admin-dashboard/form-manager', label: 'Form Manager' },
      ],
    },
    settings: {
      label: 'Settings',
      links: [
        { path: '/admin-dashboard/settings', label: 'Admin Settings' },
      ],
    },
  };


  useEffect(() => {
    const currentPath = location.pathname;
    let active = null;
    let subActive = null;

    Object.keys(adminSections).forEach((section) => {
      const sectionLinks = adminSections[section].links;
      sectionLinks.forEach((link) => {
        if (currentPath.startsWith(link.path)) {
          active = section;
        }

       
        if (link.children) {
          link.children.forEach((child) => {
            if (currentPath.startsWith(child.path)) {
              active = section;
              subActive = link.label; 
            }
          });
        }
      });
    });

    setActiveSection(active);
    setActiveSubSection(subActive); 
  }, [location.pathname]);

 
  const toggleSection = (section) => {
    setActiveSection(activeSection === section ? null : section);
    setActiveSubSection(null); 
  };

  const toggleSubSection = (subSection) => {
    setActiveSubSection(activeSubSection === subSection ? null : subSection);
  };

  return (
    <div className="sidebar-admin">
      {Object.keys(adminSections).map((section) => (
        <div key={section}>
          <div
            className={`sidebar-item ${activeSection === section ? 'active' : ''}`}
            onClick={() => toggleSection(section)}
          >
            <span>{adminSections[section].label}</span>
          </div>
          {activeSection === section && (
            <div className="submenu">
              {adminSections[section].links.map((link) => (
                <div key={link.label}>
                  <Link
                    to={link.path}
                    className={location.pathname === link.path ? 'active-link' : ''}
                  >
                    {link.label}
                  </Link>

                  
                  {link.children && (
                    <div className="submenu-children">
                      <div
                        className={`submenu-item ${activeSubSection === link.label ? 'active' : ''}`}
                        onClick={() => toggleSubSection(link.label)}
                      >
                        {link.label}
                      </div>
                      {activeSubSection === link.label && (
                        <div className="submenu-subchildren">
                          {link.children.map((child) => (
                            <Link
                              to={child.path}
                              key={child.label}
                              className={location.pathname === child.path ? 'active-link' : ''}
                            >
                              {child.label}
                            </Link>
                          ))}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  );
}

export default SideBarAdmin;

================
File: frontend/src/component/Common/Sidebar/SideBarStudent.css
================
.sidebar-student {
  width: 250px;
  background-color: #1976D2; 
  padding: 20px;
  border-radius: 8px;
  box-shadow: 2px 0px 10px rgba(0, 0, 0, 0.1);
}

.sidebar-student .sidebar-item {
  padding: 8px 12px;
  cursor: pointer;
  border-radius: 4px;
  background-color: #1565C0; 
  color: #ffffff;
  margin-bottom: 10px;
}

.sidebar-student .sidebar-item:hover {
  background-color: #404dbe; 
}

.sidebar-student .sidebar-item.active {
  background-color: #383ac4; 
  color: #ffffff;
}

.sidebar-student .submenu {
  padding-left: 20px;
  margin-top: 5px;
}

.sidebar-student .submenu a {
  display: block;
  padding: 5px 0;
  text-decoration: none;
  color: #ffffff;
}

.sidebar-student .submenu a:hover {
  background-color: #81C784; 
}

================
File: frontend/src/component/Common/Sidebar/SideBarStudent.js
================
import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import './SideBarStudent.css';

function SideBarStudent() {
  const location = useLocation();
  const [activeSection, setActiveSection] = useState(null);


  const studentSections = {
    dashboard: {
      label: 'Dashboard',
      links: [
        { path: '/student-dashboard/home', label: 'Home' },
        { path: '/student-dashboard/document-edit/1', label: 'Document Edit' },
      ],
    },
    documents: {
      label: 'Documents',
      links: [
        { path: '/student-dashboard/document', label: 'Document Manager' },
      ],
    },
    profile: {
      label: 'Information',
      links: [
        { path: '/student-dashboard/information', label: 'Personal Information' },
        { path: '/student-dashboard/student-detail', label: 'Student Detail' },
        { path: '/student-dashboard/internal-detail', label: 'Internal Supervisor Detail' },
        { path: '/student-dashboard/external-detail', label: 'External Supervisor Detail' },
        { path: '/student-dashboard/company-detail', label: 'Company Detail' },
      ],
    },
    setting: {
      label: 'Settings',
      links: [
        { path: '/student-dashboard/personal-info', label: 'Personal Info' },
        { path: '/student-dashboard/setting/update-info', label: 'Update Info' },
      ],
    },
  };

 
  useEffect(() => {
    const currentPath = location.pathname;
    let active = null;

    Object.keys(studentSections).forEach((section) => {
      const sectionLinks = studentSections[section].links;
      sectionLinks.forEach((link) => {
        if (currentPath.startsWith(link.path)) {
          active = section;
        }
      });
    });

    setActiveSection(active);
  }, [location.pathname]);

  const toggleSection = (section) => {
    setActiveSection(activeSection === section ? null : section);
  };

  return (
    <div className="sidebar-student">
      {Object.keys(studentSections).map((section) => (
        <div key={section}>
          <div
            className={`sidebar-item ${activeSection === section ? 'active' : ''}`}
            onClick={() => toggleSection(section)}
          >
            <span>{studentSections[section].label}</span>
          </div>
          {activeSection === section && (
            <div className="submenu">
              {studentSections[section].links.map((link) => (
                <Link
                  to={link.path}
                  key={link.label}
                  className={location.pathname === link.path ? 'active-link' : ''}
                >
                  {link.label}
                </Link>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  );
}

export default SideBarStudent;

================
File: frontend/src/component/Common/TopNav/TopNav.css
================
.topnav {
  display: flex;
  height: 48px;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  background-color: #023164; 
  color: white;
  
}

.topnav .logo {
  max-width: 150px; 
  max-height: 50px; 
  width: auto; 
  height: auto;
}

.topnav-menu {
  display: flex;
  gap: 20px;
  margin-left: auto;
  margin-right: 30px;
}

.topnav-menu a {
  color: white;
  text-decoration: none;
  font-size: 16px;
  font-weight: bold;
  margin-right: 30px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.topnav-menu a:hover {
  text-decoration: underline;
}

.topnav-menu a:active {
  transform: translateY(-3px); 
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
}


.avatar img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 20px;
  transform: translateY(+40px);
}

================
File: frontend/src/component/Common/TopNav/TopNav.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import './TopNav.css';
import logos from './assets/logos.png';
import avatar from './assets/avatar.png';

function TopNav() {
  return (
    <div className="topnav">
      <div className="logo">
        <img src={logos} alt="Logo" className="logo-img" />
      </div>
      <div className="topnav-menu">
        <Link to="/dashboard/home">Home</Link>
        <Link to="/dashboard/document">Document</Link>
        <Link to="/dashboard/information">Information</Link>
        <Link to="/dashboard/setting">Setting</Link>
        <li><Link to="/dashboard/statistics">Statistics</Link></li> {/* Add Statistics link */}
      </div>
      <div className="avatar">
        <img src={avatar} alt="User Avatar" />
      </div>
    </div>
  );
}

export default TopNav;

================
File: frontend/src/component/Common/TopNav/TopNavAdmin.css
================
.topnav-admin {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  background-color: #023164; /* Background color */
  color: white;
}

.topnav-admin .logo {
  font-size: 20px;
  font-weight: bold;
  color: white;
  text-decoration: none;
}

.topnav-links {
  display: flex;
  gap: 20px;
  margin-left: auto;
  margin-right: 30px;
}

.topnav-links a {
  color: white;
  text-decoration: none;
  font-size: 16px;
  font-weight: bold;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.topnav-links a:hover {
  text-decoration: underline;
}

.topnav-links a:active {
  transform: translateY(-3px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}


.avatar img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-left: 20px;
}

================
File: frontend/src/component/Common/TopNav/TopNavAdmin.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import './TopNavAdmin.css';

const adminLinks = [
  { path: '/admin-dashboard/home', label: 'Home' },
  { path: '/admin-dashboard/form-manager', label: 'Form Manager' },
  { path: '/admin-dashboard/manager-user', label: 'User Manager' },
  { path: '/admin-dashboard/statistic', label: 'Statistic' },
];

function TopNavAdmin() {
  return (
    <div className="topnav-admin">
      <div className="logo">
        <Link to="/admin-dashboard">Admin Dashboard</Link>
      </div>
      <div className="topnav-menu">
        {adminLinks.map((link, index) => (
          <Link key={index} to={link.path}>{link.label}</Link>
        ))}
      </div>
    </div>
  );
}

export default TopNavAdmin;

================
File: frontend/src/component/Common/TopNav/TopNavStudent.css
================
.topnav {
  display: flex;
  height: 48px;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  background-color: #023164; 
  color: white;
  
}

.topnav .logo {
  max-width: 150px; 
  max-height: 50px; 
  width: auto; 
  height: auto;
}

.topnav-menu {
  display: flex;
  gap: 20px;
  margin-left: auto;
  margin-right: 30px;
  list-style-type: none;
}

.topnav-menu a {
  color: white;
  text-decoration: none;
  font-size: 16px;
  font-weight: bold;
  margin-right: 30px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.topnav-menu a:hover {
  text-decoration: underline;
}

.topnav-menu a:active {
  transform: translateY(-3px); 
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
}


.avatar img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 20px;
  transform: translateY(+40px);
}

================
File: frontend/src/component/Common/TopNav/TopNavStudent.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import './TopNavStudent.css';
import logos from './assets/logos.png';
import avatar from './assets/avatar.png';

const studentLinks = [
  { path: '/student-dashboard/home', label: 'Home' },
  { path: '/student-dashboard/document', label: 'Document' },
  { path: '/student-dashboard/information', label: 'Information' },
  { path: '/student-dashboard/setting', label: 'Setting' },
];

function TopNavStudent() {
  return (
    <div className="topnav">
      <div className="logo">
        <img src={logos} alt="Logo" className="logo-img" />
      </div>
      <div className="topnav-menu">
        {studentLinks.map((link, index) => (
          <Link key={index} to={link.path}>{link.label}</Link>
        ))}
      </div>
      <div className="avatar">
        <img src={avatar} alt="User Avatar" />
      </div>
    </div>
  );
}

export default TopNavStudent;

================
File: frontend/src/component/Login/Login.css
================
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f0f4f8; 
}


.login-box {
  width: 360px; 
  height: 500px; 
  padding: 25px; 
  background-color: #ffffff; 
  border-radius: 10px; 
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); 
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  text-align: left;
}


h2 {
  margin-bottom: 25px;
  font-size: 26px; 
  color: #333333;
  text-align: center;
  font-weight: 600; 
}


input, select {
  width: 100%;
  padding: 12px;
  margin-bottom: 15px;
  border: 1px solid #dddddd; 
  border-radius: 6px;
  box-sizing: border-box;
  font-size: 14px;
  transition: border-color 0.3s ease;
}


input:focus, select:focus {
  border-color: #007BFF; 
  outline: none; 
}


button {
  padding: 12px 20px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  width: 100%;
  font-size: 16px;
  font-weight: 500;
  background-color: #007BFF; 
  color: #ffffff;
  transition: background-color 0.3s ease, opacity 0.3s ease;
}


button:hover {
  background-color: #0056b3; 
  opacity: 0.95;
}


.signup-button {
  background-color: #28a745; 
}

.signup-button:hover {
  background-color: #218838; 
}


.dashboard {
  background: linear-gradient(to right, #0072ff, #00c6ff); 
  background-size: cover;
  background-position: center;
  background-attachment: fixed;
  height: 100vh;
}

================
File: frontend/src/component/Login/Login.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios'; 
import './Login.css';

function Login() {
  const [username, setUsername] = useState(''); 
  const [password, setPassword] = useState(''); 
  const [role, setRole] = useState('Student'); 
  const navigate = useNavigate(); 

  const handleSubmit = async (e) => {
    e.preventDefault();  

    if (username && password && role) {
      try {
        const response = await axios.post('http://localhost:5000/login', {
          username,
          password,
          role
        });

        if (response.status === 200) {
          const data = response.data;
          localStorage.setItem('token', data.token);
          navigate('/dashboard');
        }
      } catch (error) {
        console.error('Login error:', error);
        alert('Invalid credentials');
      }
    } else {
      alert('Please fill in all fields');
    }
  };

  return (
    <div className="login-container">
      <div className="login-box">
        <h2>Login</h2>
        <form onSubmit={handleSubmit}>
          <div>
            <label htmlFor="username">Username</label>
            <input
              type="text"
              id="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="Enter your username"
            />
          </div>
          <div>
            <label htmlFor="role">Role</label>
            <select
              id="role"
              value={role}
              onChange={(e) => setRole(e.target.value)}
            >
              <option value="Supervisor">Supervisor</option>
              <option value="Student">Student</option>
              <option value="Admin">Admin</option>
            </select>
          </div>
          <div>
            <label htmlFor="password">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter your password"
            />
          </div>
          <button type="submit">Login</button>
        </form>
        <button onClick={() => navigate('/signup')} className="signup-button">Sign Up</button>
      </div>
    </div>
  );
}

export default Login;

================
File: frontend/src/component/Signup/Signup.css
================
.signup-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f8f9fa; 
    font-family: Arial, sans-serif;
  }
  
 
  .signup-box {
    width: 400px;
    padding: 20px;
    background: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  

  .signup-box h2 {
    margin-bottom: 20px;
    text-align: center;
    color: #333333;
    font-size: 24px;
  }
  
  
  .signup-box label {
    display: block;
    margin-bottom: 5px;
    font-size: 14px;
    color: #555555;
  }
  
  
  .signup-box input,
  .signup-box select {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    background: #f9f9f9;
    box-sizing: border-box;
  }
  
  .signup-box input:focus,
  .signup-box select:focus {
    border-color: #007bff;
    outline: none;
    background: #ffffff;
  }
  
 
  .signup-box button {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: #ffffff;
    font-size: 16px;
    cursor: pointer;
  }
  
  .signup-box button:hover {
    background-color: #0056b3;
  }
  
 
  @media (max-width: 480px) {
    .signup-box {
      width: 90%;
      padding: 15px;
    }
  }

================
File: frontend/src/component/Signup/Signup.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Signup.css';

function SignUp() {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [role, setRole] = useState('Student');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();

    
    if (password !== confirmPassword) {
      alert('Passwords do not match!');
      return;
    }

    
    console.log('User signed up:', { firstName, lastName, email, role, password });
    alert('Sign up successful! Redirecting to the dashboard...');

   
    if (role === 'Student') {
      navigate('/student-dashboard');
    } else if (role === 'Supervisor') {
      navigate('/supervisor-dashboard');
    } else if (role === 'Admin') {
      navigate('/admin-dashboard');
    }
  };

  return (
    <div className="signup-container">
      <div className="signup-box">
        <h2>Sign Up</h2>
        <form onSubmit={handleSubmit}>
          <div>
            <label htmlFor="firstName">First Name</label>
            <input
              type="text"
              id="firstName"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              placeholder="Enter your first name"
              required
            />
          </div>

          <div>
            <label htmlFor="lastName">Last Name</label>
            <input
              type="text"
              id="lastName"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              placeholder="Enter your last name"
              required
            />
          </div>

          <div>
            <label htmlFor="email">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Enter your email"
              required
            />
          </div>

          <div>
            <label htmlFor="role">Role</label>
            <select
              id="role"
              value={role}
              onChange={(e) => setRole(e.target.value)}
              required
            >
              <option value="Supervisor">Supervisor</option>
              <option value="Student">Student</option>
              <option value="Admin">Admin</option>
            </select>
          </div>

          <div>
            <label htmlFor="password">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter your password"
              required
            />
          </div>

          <div>
            <label htmlFor="confirmPassword">Confirm Password</label>
            <input
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Confirm your password"
              required
            />
          </div>

          <button type="submit">Sign Up</button>
        </form>
      </div>
    </div>
  );
}

export default SignUp;

================
File: frontend/src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: frontend/src/layout/MainLayout.css
================
.main-layout {
  display: flex;
  flex-direction: column;
  height: 200vh; 
  overflow: hidden;
}

.layout-content {
  display: flex;
  flex: 1;
  margin-top: 60px; 
  position: relative;
}

.sidebar-content-wrapper {
  display: flex;
  width: 100%;
  height: 100%;
  
}


.content {
  flex: 1;
  overflow: auto;
  padding: 20px;
  padding-right: 60px;
  background-color: #f4f6f9; 
  height: 100%; 
  position: relative;
  border-radius: 8px;
}

================
File: frontend/src/layout/MainLayout.js
================
import React from 'react';
import { Outlet } from 'react-router-dom';
import TopNavAdmin from '../component/Common/TopNav/TopNavAdmin';
import TopNavStudent from '../component/Common/TopNav/TopNavStudent';
import SideBarAdmin from '../component/Common/Sidebar/SideBarAdmin';
import SideBarStudent from '../component/Common/Sidebar/SideBarStudent';
import "./MainLayout.css"

function MainLayout({ role }) {
  

  if (!role) {
    return <div className="unauthorized">Unauthorized: Role not specified.</div>;
  }

  const isAdmin = role === 'Admin';

  return (
    <div className="main-layout">
      {isAdmin ? <TopNavAdmin /> : <TopNavStudent />}
      <div className={`main-content ${isAdmin ? 'admin' : 'student'}`}>
        <div className="sidebar-content-wrapper">
          {isAdmin ? <SideBarAdmin /> : <SideBarStudent />}
          <div className="content">
            <Outlet />
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainLayout;

================
File: frontend/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: frontend/src/pages/AdminDashboard/DashboardAdmin/DashboardAdmin.css
================
.dashboard {
  display: flex;
  flex-direction: column;
  height: 100vh;
  font-family: Arial, sans-serif;
}

.dashboard-content {
  display: flex;
  flex: 1;
}


.main-content {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  background-color: #ffffff;
}

================
File: frontend/src/pages/AdminDashboard/DashboardAdmin/DashboardAdmin.js
================
import React from 'react';

import './DashboardAdmin.css';

import WorkManagerAdmin from './WorkManagerAdmin';



function DashboardAdmin() {
  return (
    
        <div className="main-content-admin">
          <WorkManagerAdmin /> 
        </div>
      
  );
}

export default DashboardAdmin;

================
File: frontend/src/pages/AdminDashboard/DashboardAdmin/DocumentEditAdmin.css
================
.document-edit {
    display: flex;
    flex-direction: column;
    height: 100vh;
    padding: 20px;
  }
  
  .editor-toolbar {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
    padding: 10px;
    background-color: #f4f4f4;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .editor-toolbar select,
  .editor-toolbar input,
  .editor-toolbar button {
    padding: 8px;
    font-size: 14px;
    margin: 5px;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
  
  .editor-toolbar button {
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
  }
  
  .editor-toolbar button:hover {
    background-color: #45a049;
  }
  
  .editor-textarea {
    flex: 1;
    padding: 15px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-bottom: 20px;
    width: 100%;
    resize: vertical;
  }
  
  .editor-actions {
    display: flex;
    justify-content: flex-start;
    gap: 10px;
  }
  
  .save-button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .save-button:hover {
    background-color: #0056b3;
  }

================
File: frontend/src/pages/AdminDashboard/DashboardAdmin/DocumentEditAdmin.js
================
import React, { useState } from 'react';
import './DocumentEditAdmin.css';

function DocumentEditAdmin() {
  const [documentContent, setDocumentContent] = useState('');

  const handleContentChange = (event) => {
    setDocumentContent(event.target.value);
  };

  const handleSave = () => {
    alert('Document saved!');
    
  };

  return (
    <div className="document-edit-admin">
      <h1>Edit Document</h1>
      <textarea
        value={documentContent}
        onChange={handleContentChange}
        rows="10"
        cols="50"
        placeholder="Edit the document content here..."
      />
      <button onClick={handleSave}>Save</button>
    </div>
  );
}

export default DocumentEditAdmin;

================
File: frontend/src/pages/AdminDashboard/DashboardAdmin/WorkManagerAdmin.css
================
.body{
  overflow: hidden;
}
.work-manager-layout {
  display: flex;
  gap: 0px;
}

/* Main Content */
.work-manager-container {
  flex: 1;
  padding: 20px;
  font-family: Arial, sans-serif;
}

/* Sidebar */
.time-management-sidebar {
  width: 300px;
  padding: 20px;
  border-radius: 8px;
  background-color: #11bcff;
  border-left: 1px solid #1e9cd6;
  font-family: Arial, sans-serif;
  overflow: hidden;
}

.time-management-sidebar h2 {
  font-size: 20px;
  margin-bottom: 20px;
  border-bottom: 2px solid #ddd;
  padding-bottom: 10px;
}

.calendar-container {
  margin-bottom: 20px;
}

.task-list h3 {
  font-size: 18px;
  margin-bottom: 10px;
}

.task-list ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.task-list li {
  padding: 10px;
  border: 1px solid #1b9fb6;
  border-radius: 5px;
  margin-bottom: 10px;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.task-title {
  font-weight: bold;
}

.task-deadline {
  font-size: 14px;
  color: #888;
}

/* Calendar Styles */
.react-calendar {
  width: 100%;
  border: none;
  font-family: Arial, sans-serif;
  font-size: 14px;
}

.react-calendar__tile--active {
  background-color: #00aaff !important;
  color: white !important;
}

================
File: frontend/src/pages/AdminDashboard/DashboardAdmin/WorkManagerAdmin.js
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import "./WorkManagerAdmin.css";

function WorkManagerAdmin() {
  const navigate = useNavigate();

  const dummyData = {
    recentFiles: [
      { id: 1, name: "Proposal File 1", date: "2024-11-01", image: "https://picsum.photos/200/150?random=1" },
      { id: 2, name: "Internship Contract 2", date: "2024-10-30", image: "https://picsum.photos/200/150?random=2" },
    ],
    procedureDocumentation: {
      student: Array.from({ length: 4 }, (_, index) => ({
        id: index + 1,
        name: `Student Doc ${index + 1}`,
        date: `2024-10-${(index % 30) + 1}`,
        image: `https://picsum.photos/200/150?random=${index + 10}`,
      })),
      supervisor: Array.from({ length: 4 }, (_, index) => ({
        id: index + 1,
        name: `Supervisor Doc ${index + 1}`,
        date: `2024-09-${(index % 30) + 1}`,
        image: `https://picsum.photos/200/150?random=${index + 20}`,
      })),
    },
    otherDocumentation: Array.from({ length: 4 }, (_, index) => ({
      id: index + 1,
      name: `Other Doc ${index + 1}`,
      date: `2024-07-${(index % 30) + 1}`,
    })),
    tasks: [
      { id: 1, title: "Submit Proposal", deadline: "2024-11-05" },
      { id: 2, title: "Meeting with Supervisor", deadline: "2024-11-07" },
      { id: 3, title: "Upload Final Report", deadline: "2024-11-20" },
    ],
  };

  const [searchText, setSearchText] = useState("");
  const [selectedDate, setSelectedDate] = useState(new Date());

  const renderFileCard = (file) => (
    <div key={file.id} className="grid-item" onClick={() => navigate(`/edit/${file.id}`)}>
      <img src={file.image} alt={file.name} />
      <div className="file-name">{file.name}</div>
      <div className="update-date">{file.date}</div>
    </div>
  );

  return (
    <div className="work-manager-layout">
      
      <div className="work-manager-container">
        
        <div className="top-actions">
          <div className="search-bar">
            <input
              type="text"
              placeholder="Search files..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
            />
          </div>
          <div className="filter-actions">
            <button>All</button>
            <button>New</button>
            <button>Old</button>
          </div>
        </div>

        
        <div className="section">
          <h2>Recent Files</h2>
          <div className="grid-container">
            {dummyData.recentFiles.map(renderFileCard)}
          </div>
        </div>

        
        <div className="section">
          <h2>All Documentation</h2>
          <div>
            <h3>Procedure Documentation</h3>
            <div className="grid-container">
              {dummyData.procedureDocumentation.student.map(renderFileCard)}
            </div>
          </div>
        </div>
      </div>

      
      <div className="time-management-sidebar">
        <h2>Time Management</h2>
        
        <div className="calendar-container">
          <Calendar value={selectedDate} onChange={setSelectedDate} />
        </div>
        
        <div className="task-list">
          <h3>Upcoming Tasks</h3>
          <ul>
            {dummyData.tasks.map((task) => (
              <li key={task.id}>
                <div className="task-title">{task.title}</div>
                <div className="task-deadline">{task.deadline}</div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}

export default WorkManagerAdmin;

================
File: frontend/src/pages/AdminDashboard/FormManager/FormManager.css
================
.setting-container {
    margin: 20px;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  h1 {
    text-align: center;
    color: #333;
  }
  
  .system-settings {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .setting-item {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .dropdown {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
  }
  
  button {
    padding: 10px 15px;
    margin: 5px;
    border: none;
    background-color: #007bff;
    color: white;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #0056b3;
  }
  
  .settings-section {
    margin-bottom: 20px;
  }
  
  label {
    display: block;
    margin-bottom: 5px;
  }
  
  input, select {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
  }

================
File: frontend/src/pages/AdminDashboard/FormManager/FormManager.js
================
import React, { useState, useEffect } from 'react';
import './FormManager.css';

function FormManager() {
  const [forms, setForms] = useState([]);

  useEffect(() => {
    const fetchForms = async () => {
      const dummyForms = [
        { id: 1, name: 'Internship Application Form', createdDate: '2024-12-01' },
        { id: 2, name: 'Internship Evaluation Form', createdDate: '2024-12-02' },
      ];
      setForms(dummyForms);
    };
    fetchForms();
  }, []);

  const handleFormCreate = () => {
    console.log('Create new form');
  };

  const handleFormEdit = (formId) => {
    console.log(`Edit form with ID: ${formId}`);
  };

  const handleFormDelete = (formId) => {
    console.log(`Delete form with ID: ${formId}`);
  };

  return (
    <div className="form-manager-container">
      <h1>Form Manager</h1>

      <div className="form-settings">
        <div className="setting-item">
          <button onClick={handleFormCreate}>Create New Form</button>
          <div className="form-list">
            {forms.map((form) => (
              <div className="form-item" key={form.id}>
                <span className="form-name">{form.name}</span>
                <button onClick={() => handleFormEdit(form.id)}>Edit</button>
                <button className="delete" onClick={() => handleFormDelete(form.id)}>Delete</button>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export default FormManager;

================
File: frontend/src/pages/AdminDashboard/ManagerUser/Preview.js
================
// src/pages/PreviewPage.js
import React from 'react';

const PreviewPage = () => {
  return (
    <div className="preview-page">
      <h1>Preview</h1>
      <div className="preview-content">
        <p>Xem trước thông tin chi tiết của sinh viên hoặc giảng viên.</p>
        <div className="preview-card">
          <h3>Tên: Nguyễn Văn A</h3>
          <p>Mã sinh viên: 12345</p>
          <p>Khóa học: Công nghệ thông tin</p>
          <p>Đơn vị: Khoa CNTT</p>
          <p>Địa điểm: TP.HCM</p>
        </div>
        {/* Bạn có thể mở rộng trang này để chứa các thông tin chi tiết khác */}
      </div>
    </div>
  );
};

export default PreviewPage;

================
File: frontend/src/pages/AdminDashboard/ManagerUser/StatisticsPage.css
================
.statistics-page {
    font-family: Arial, sans-serif;
    padding: 20px;
  }
  
  .statistic-header h1 {
    font-size: 2rem;
    margin-bottom: 10px;
  }
  
  .statistic-header p {
    font-size: 1rem;
    color: #555;
  }
  
  .statistic-table {
    margin-bottom: 30px;
  }
  
  .statistic-table h2 {
    font-size: 1.5rem;
    margin-bottom: 10px;
  }
  
  .chart-container {
    position: relative;
    height: 300px; 
    background-color: #f0f0f0; 
    border-radius: 10px; 
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
    margin: 10px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  .statistic-charts {
    display: grid;
    grid-template-columns: repeat(2, 1fr); 
    grid-gap: 70px; 
  }
  
  .statistic-charts .chart-container {
    width: 100%;
    height: 200px;
    max-width: 300px;
    margin: 0 auto;
    background-color: #fafafa; 
  }
  
  .chart-title {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .chart-note {
    font-size: 0.9rem;
    color: #777;
    margin-top: 10px;
  }
  
  .table-footer {
    margin-top: 10px;
  }
  
  .table-note {
    font-size: 0.9rem;
    color: #777;
  }
  
  .button-container {
    margin-top: 30px;
    text-align: center;
  }
  
  .back-button {
    background-color: #36a2eb;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
  }
  
  .back-button:hover {
    background-color: #2a89c8;
  }

================
File: frontend/src/pages/AdminDashboard/ManagerUser/StatisticsPage.js
================
import React from "react";
import { Bar, Pie } from "react-chartjs-2";
import "chart.js/auto";
import "./StatisticsPage.css";

const StatisticsPage = () => {
  
  const facultyData = {
    labels: ["ICT", "DS", "CS"],
    datasets: [
      {
        label: "Number of Students",
        data: [120, 80, 100], 
        backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56"],
      },
    ],
  };

  const locationData = {
    labels: ["Domestic", "Abroad"],
    datasets: [
      {
        data: [250, 50],
        backgroundColor: ["#4BC0C0", "#FF9F40"],
      },
    ],
  };

  const internshipData = {
    labels: ["Company", "Laboratory"],
    datasets: [
      {
        data: [200, 100], 
        backgroundColor: ["#9966FF", "#FF6384"],
      },
    ],
  };

  const waveData = {
    labels: ["Wave 1", "Wave 2"],
    datasets: [
      {
        data: [700, 500], 
        backgroundColor: ["#FF8C00", "#FF6347"],
      },
    ],
  };

  const validationData = {
    labels: ["Valid", "Invalid"],
    datasets: [
      {
        data: [900, 300], 
        backgroundColor: ["#36A2EB", "#FF9F40"],
      },
    ],
  };

  return (
    <div className="statistics-page">
      <header className="statistic-header">
        <h1>Internship Statistics</h1>
        <p>Overview of student internship distribution</p>
      </header>

      
      <div className="statistic-table">
        <h2>Students by Faculty</h2>
        <div className="chart-container horizontal-bar">
          <Bar
            data={facultyData}
            options={{
              responsive: true,
              maintainAspectRatio: false,
              indexAxis: "y", 
            }}
          />
        </div>
        <div className="table-footer">
          <p>Total Students: 300</p>
        </div>
        <p className="table-note">Data includes ICT, DS, and CS faculties.</p>
      </div>

      
      <div className="statistic-charts">
        
        <div className="chart-container">
          <div className="chart-title">Internship Waves</div>
          <Pie
            data={waveData}
            options={{
              responsive: true,
              maintainAspectRatio: false,
            }}
          />
          <div className="chart-note">Number of students in Wave 1 vs Wave 2</div>
        </div>

        
        <div className="chart-container">
          <div className="chart-title">Validation Status</div>
          <Pie
            data={validationData}
            options={{
              responsive: true,
              maintainAspectRatio: false,
            }}
          />
          <div className="chart-note">Valid vs Invalid students</div>
        </div>

        
        <div className="chart-container">
          <div className="chart-title">Students by Location</div>
          <Pie
            data={locationData}
            options={{
              responsive: true,
              maintainAspectRatio: false,
            }}
          />
          <div className="chart-note">Domestic vs Abroad internships</div>
        </div>

        
        <div className="chart-container">
          <div className="chart-title">Internship Type</div>
          <Pie
            data={internshipData}
            options={{
              responsive: true,
              maintainAspectRatio: false,
            }}
          />
          <div className="chart-note">Company vs Laboratory internships</div>
        </div>
      </div>

      
      <div className="button-container">
        <button className="back-button" onClick={() => window.history.back()}>
          Back
        </button>
      </div>
    </div>
  );
};

export default StatisticsPage;

================
File: frontend/src/pages/AdminDashboard/ManagerUser/UserManager.css
================
.user-manager-root {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f4f4f4;
  }
  
  .card-container {
    display: flex;
    gap: 20px;
  }
  
  .card {
    width: 400px;
    height: 280px;
    background-color: white;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    text-align: center;
    padding: 20px;
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  .card:hover {
    transform: scale(1.05);
  }

================
File: frontend/src/pages/AdminDashboard/ManagerUser/UserManager.js
================
import React from "react";
import { useNavigate } from "react-router-dom";
import "./UserManager.css";

function UserManager() {
  const navigate = useNavigate();

  return (
    <div className="user-manager-root">
      <div className="card-container">
        <div className="card" onClick={() => navigate("/admin-dashboard/user-manager-student")}>
          <h2>Student</h2>
          <p>Manage students, view statistics, and preview their information.</p>
        </div>
        <div className="card" onClick={() => navigate("/admin-dashboard/user-manager-supervisor")}>
          <h2>Supervisor</h2>
          <p>Manage supervisors, view their details, and assigned students.</p>
        </div>
      </div>
    </div>
  );
}

export default UserManager;

================
File: frontend/src/pages/AdminDashboard/ManagerUser/UserManagerStudent.css
================
.user-manager-container {
    padding: 20px;
    background-color: #f9f9f9;
    font-family: Arial, sans-serif;
}


.tab-container {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 20px;
    gap: 10px;
}

.tab-container button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    background-color: #007BFF;
    color: white;
    font-size: 14px;
    cursor: pointer;
}

.tab-container button.active {
    background-color: #0056b3;
}

.tab-container button:hover {
    background-color: #0056b3;
}


.user-header {
    display: flex;
    flex-wrap: nowrap; 
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
    gap: 10px; 
}

.add-button-manager {
    border: none;
    height: 30px;
    border-radius: 4px;
    background-color: #0056b3;
    color: white;
    font-size: 14px;
    cursor: pointer;
    align-self: flex-end;
}

.add-button:hover {
    background-color: #218838;
}


.search-input {
    flex: 1;
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
    height: 30px;
}


.filters {
    display: flex;
    flex-wrap: nowrap;
    gap: 10px;
    width: 30px;
    margin-right: 200px;
}

.filters select {
    padding: 0 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
    height: 30px; 
    background-color: white;
    color: black;
    min-width: 120px; 
}


.student-table, .supervisor-table {
    overflow-x: auto; 
    background-color: white;
    padding: 10px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

table th, table td {
    padding: 12px 10px;
    text-align: left;
    border: 1px solid #ddd;
}

table th {
    background-color: #007BFF;
    color: white;
    font-weight: bold;
}


button:hover {
    opacity: 0.9;
}


@media (max-width: 768px) {
    .user-header {
        flex-direction: column;
        gap: 15px;
    }

    .filters {
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 10px;
    }

    .search-input {
        width: 50%;
    }
}


.sidebar {
    position: fixed;
    top: 0;
    right: 0; 
    width: 300px;
    height: 100%;
    background-color: #f9f9f9;
    box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1); 
    padding: 20px;
    overflow-y: auto;
    z-index: 1000;
    transition: transform 1s ease-in-out;
    transform: translateX(460%); 
}

.sidebar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.sidebar-header h3 {
    margin: 0;
    font-size: 18px;
}

.close-button {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #333;
}


.sidebar form label {
    display: block;
    margin-bottom: 10px;
}

.sidebar form input,
.sidebar form select {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

.submit-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
}

.submit-button:hover {
    background-color: #0056b3;
}

.sidebar.active {
    transform: translateX(0); 
}


.action-buttons {
    display: flex;
    justify-content: flex-end; 
    gap: 20px; 
    margin-top: 20px; 
}

.action-button {
    width: 100px; 
    height: 100px; 
    background-color: #007BFF; 
    color: white; 
    border: none;
    border-radius: 8px; 
    font-size: 16px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center; 
    text-align: center;
}

.action-button:hover {
    background-color: #0056b3; 
}

================
File: frontend/src/pages/AdminDashboard/ManagerUser/UserManagerStudent.js
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./UserManagerStudent.css";

function UserManagerStudent() {
  const navigate = useNavigate();

  
  const dummyData = [
    { id: 1, name: "Nguyen A", dob: "2000-01-01", major: "Computer Science", unit: "Company", year: "2020", location: "Hanoi", phone: "0123456789", topic: "AI" },
    { id: 2, name: "Tran B", dob: "1999-02-02", major: "Mechanical Engineering", unit: "Lab", year: "2021", location: "HCM", phone: "0987654321", topic: "Robotics" },
    { id: 3, name: "Le C", dob: "1998-03-03", major: "Electrical Engineering", unit: "Company", year: "2020", location: "Hanoi", phone: "0112233445", topic: "Power Systems" },
    
  ];

  
  const [filters, setFilters] = useState({
    name: "",
    major: "",
    unit: "",
    year: "",
    location: "",
    phone: "",
    topic: "",
  });

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;

  
  const filteredData = dummyData.filter((student) => {
    return (
      student.name.toLowerCase().includes(filters.name.toLowerCase()) &&
      student.major.toLowerCase().includes(filters.major.toLowerCase()) &&
      student.unit.toLowerCase().includes(filters.unit.toLowerCase()) &&
      student.year.toLowerCase().includes(filters.year.toLowerCase()) &&
      student.location.toLowerCase().includes(filters.location.toLowerCase()) &&
      student.phone.toLowerCase().includes(filters.phone.toLowerCase()) &&
      student.topic.toLowerCase().includes(filters.topic.toLowerCase())
    );
  });

  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const paginatedData = filteredData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handlePrevious = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNext = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const handlePageClick = (page) => {
    setCurrentPage(page);
  };

  const handleEditClick = (id) => {
    navigate(`/edit/${id}`);
  };

  const handleFilterChange = (event) => {
    const { name, value } = event.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
    setCurrentPage(1); 
  };


  const handleNavigateToPreview = () => {
    navigate("/admin-dashboard/preview-page");
  };

  const handleNavigateToStatistics = () => {
    navigate("/admin-dashboard/statistics-page");
  };

  return (
    <div className="user-manager-student">
      <div className="top-actions">
        <div className="search-bar">
          <input
            type="text"
            placeholder="Search by name"
            value={filters.name}
            onChange={handleFilterChange}
            name="name"
          />
          <input
            type="text"
            placeholder="Search by phone"
            value={filters.phone}
            onChange={handleFilterChange}
            name="phone"
          />
        </div>
        <div className="filter-actions">
          <input
            type="text"
            placeholder="Major"
            value={filters.major}
            onChange={handleFilterChange}
            name="major"
          />
          <input
            type="text"
            placeholder="Unit (Company or Lab)"
            value={filters.unit}
            onChange={handleFilterChange}
            name="unit"
          />
          <input
            type="text"
            placeholder="Year"
            value={filters.year}
            onChange={handleFilterChange}
            name="year"
          />
          <input
            type="text"
            placeholder="Location"
            value={filters.location}
            onChange={handleFilterChange}
            name="location"
          />
          <input
            type="text"
            placeholder="Topic"
            value={filters.topic}
            onChange={handleFilterChange}
            name="topic"
          />
        </div>
      </div>

      <table className="student-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Date of Birth</th>
            <th>Major</th>
            <th>Unit</th>
            <th>Year</th>
            <th>Location</th>
            <th>Phone</th>
            <th>Topic</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {paginatedData.map((student) => (
            <tr key={student.id}>
              <td>{student.name}</td>
              <td>{student.dob}</td>
              <td>{student.major}</td>
              <td>{student.unit}</td>
              <td>{student.year}</td>
              <td>{student.location}</td>
              <td>{student.phone}</td>
              <td>{student.topic}</td>
              <td>
                <button onClick={() => handleEditClick(student.id)}>Edit</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="pagination">
        <button onClick={handlePrevious} disabled={currentPage === 1}>
          Previous
        </button>
        {Array.from({ length: totalPages }, (_, index) => (
          <button
            key={index}
            className={currentPage === index + 1 ? "active" : ""}
            onClick={() => handlePageClick(index + 1)}
          >
            {index + 1}
          </button>
        ))}
        <button onClick={handleNext} disabled={currentPage === totalPages}>
          Next
        </button>
      </div>

      
      <div className="navigation-buttons">
        <button onClick={handleNavigateToPreview}>Preview</button>
        <button onClick={handleNavigateToStatistics}>Statistics</button>
      </div>
    </div>
  );
}

export default UserManagerStudent;

================
File: frontend/src/pages/AdminDashboard/ManagerUser/UserManagerSupervisor.css
================
.user-manager-supervisor {
    padding: 20px;
    background-color: #f4f4f4;
  }
  
  .supervisor-card {
    background-color: white;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    margin-bottom: 20px;
    padding: 20px;
  }
  
  .supervisor-details {
    display: flex;
    gap: 20px;
  }
  
  .supervisor-photo {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .supervisor-info h3 {
    margin: 0;
  }
  
  .students-list {
    margin-top: 20px;
  }
  
  .students-list table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .students-list th, .students-list td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  
  .students-list th {
    background-color: #f4f4f4;
    font-weight: bold;
  }

================
File: frontend/src/pages/AdminDashboard/ManagerUser/UserManagerSupervisor.js
================
import React from "react";
import "./UserManagerSupervisor.css";

function UserManagerSupervisor() {
  const supervisors = [
    {
      id: 1,
      name: "Pham Minh Tuan",
      unit: "USTH",
      email: "tuan.pham@usth.edu.vn",
      phone: "0123456789",
      students: [
        { name: "Nguyen Thi Mai", studentId: "2021001", major: "ICT", topic: "AI Research" },
        { name: "Le Hoang Nam", studentId: "2021002", major: "DS", topic: "Data Analysis" },
      ],
    },
    {
      id: 2,
      name: "Nguyen Thi Lan",
      unit: "Company",
      email: "lan.nguyen@company.com",
      phone: "0987654321",
      students: [
        { name: "Tran Thi Lan", studentId: "2021003", major: "CS", topic: "Web Development" },
      ],
    },
  ];

  return (
    <div className="user-manager-supervisor">
      {supervisors.map((supervisor) => (
        <div key={supervisor.id} className="supervisor-card">
          <div className="supervisor-details">
            <img
              src={`https://via.placeholder.com/150?text=${supervisor.name.split(" ")[0]}`}
              alt={supervisor.name}
              className="supervisor-photo"
            />
            <div className="supervisor-info">
              <h3>{supervisor.name}</h3>
              <p>Unit: {supervisor.unit}</p>
              <p>Email: {supervisor.email}</p>
              <p>Phone: {supervisor.phone}</p>
            </div>
          </div>
          <div className="students-list">
            <h4>Students:</h4>
            <table>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>ID</th>
                  <th>Major</th>
                  <th>Topic</th>
                </tr>
              </thead>
              <tbody>
                {supervisor.students.map((student, index) => (
                  <tr key={index}>
                    <td>{student.name}</td>
                    <td>{student.studentId}</td>
                    <td>{student.major}</td>
                    <td>{student.topic}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>
  );
}

export default UserManagerSupervisor;

================
File: frontend/src/pages/AdminDashboard/Setting/AdminSetting.css
================
.setting-container {
    margin: 20px;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  h1 {
    text-align: center;
    color: #333;
  }
  
  .system-settings {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .setting-item {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .dropdown {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
  }
  
  button {
    padding: 10px 15px;
    margin: 5px;
    border: none;
    background-color: #007bff;
    color: white;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #0056b3;
  }
  
  .settings-section {
    margin-bottom: 20px;
  }
  
  label {
    display: block;
    margin-bottom: 5px;
  }
  
  input, select {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
  }

================
File: frontend/src/pages/AdminDashboard/Setting/AdminSetting.js
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./AdminSetting.css";

function Setting() {
  const navigate = useNavigate();

  const [isSettingsOpen, setSettingsOpen] = useState(false);
  const [isHelpOpen, setHelpOpen] = useState(false);
  const [isScreenOpen, setScreenOpen] = useState(false);

  const toggleSettings = () => setSettingsOpen(!isSettingsOpen);
  const toggleHelp = () => setHelpOpen(!isHelpOpen);
  const toggleScreen = () => setScreenOpen(!isScreenOpen);

  return (
    <div className="setting-container">
      <h1>Cài đặt</h1>

      <div className="system-settings">
        <div className="setting-item">
          <button onClick={toggleSettings}>Cài đặt</button>
          {isSettingsOpen && (
            <div className="dropdown">
              <p>Ngôn ngữ:</p>
              <select>
                <option value="en">Tiếng Anh</option>
                <option value="vi">Tiếng Việt</option>
              </select>
              
              <div className="settings-section">
                <h3>Cài đặt Thông báo</h3>
                <label htmlFor="emailNotif">Thông báo Email:</label>
                <input type="checkbox" id="emailNotif" defaultChecked />
                <label htmlFor="smsNotif">Thông báo SMS:</label>
                <input type="checkbox" id="smsNotif" />
              </div>
              
              <div className="settings-section">
                <h3>Bảo trì Hệ thống</h3>
                <button>Sao lưu Dữ liệu</button>
                <button>Phục hồi Dữ liệu</button>
              </div>
            </div>
          )}
        </div>

        <div className="setting-item">
          <button onClick={toggleHelp}>Trợ giúp</button>
          {isHelpOpen && (
            <div className="dropdown">
              <p>Trung tâm Trợ giúp</p>
              <p>Báo cáo</p>
            </div>
          )}
        </div>

        <div className="setting-item">
          <button onClick={toggleScreen}>Màn hình</button>
          {isScreenOpen && (
            <div className="dropdown">
              <p>Chế độ Tối</p>
              <p>Bàn phím</p>
            </div>
          )}
        </div>

        <div className="setting-item">
          <button onClick={() => navigate("/")}>Đăng xuất</button>
        </div>
      </div>
    </div>
  );
}

export default Setting;

================
File: frontend/src/pages/StudentDashboard/DashboardStudent/Dashboard.css
================
.dashboard {
  display: flex;
  flex-direction: column;
  height: 100vh;
  font-family: Arial, sans-serif;
}

.dashboard-content {
  display: flex;
  flex: 1;
}


.main-content {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  background-color: #ffffff;
}

================
File: frontend/src/pages/StudentDashboard/DashboardStudent/Dashboard.js
================
import React from 'react';

import './Dashboard.css';
import WorkManager from './WorkManager'; 



function Dashboard() {
  return (
    
        <div className="main-content">
          <WorkManager /> 
        </div>
      
  );
}

export default Dashboard;

================
File: frontend/src/pages/StudentDashboard/DashboardStudent/DocumentEdit.css
================
.document-edit {
  display: flex;
  flex-direction: column;
  height: 100vh;
}


.main-content {
  display: flex;
  flex: 1;
}


.main-content .sidebar {
  width: 250px;
  background-color: #2e3246;
  color: white;
  padding: 20px;
  position: fixed;
  top: 60px;
  left: 0;
  z-index: 10;
  height: calc(100vh - 60px);
  overflow-y: auto;
}


.content {
  margin-left: 250px;
  flex: 1;
  padding: 20px;
  background-color: #f4f5fa;
  overflow-y: auto;
}


.pdf-container {
  width: 100%;
  height: 600px;
  background-color: #e3e3e3;
  margin-bottom: 20px;
}


.form-container {
  background-color: #fff;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.form-container h2 {
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  font-weight: bold;
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

================
File: frontend/src/pages/StudentDashboard/DashboardStudent/DocumentEdit.js
================


================
File: frontend/src/pages/StudentDashboard/DashboardStudent/WorkManager.css
================
.top-actions {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
}

.search-bar {
  flex: 1;
  display: flex;
}

.search-bar input {
  width: 100%;
  padding: 8px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.filter-actions {
  display: inline-flex;
  gap: 5px;
}

.filter-actions button {
  height: 36px;
  padding: 8px 16px;
  background-color: #007BFF;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-top: -15px;
}

.filter-actions .add-button {
  width: 36px;
  height: 36px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  background-color: #007BFF;
  border-radius: 4px;
  
}

.filter-actions button:hover {
  opacity: 0.8;
}

.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 5px;
  margin-top: 20px;
  padding: 10px 0;
}

.pagination button {
  height: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 14px;
  color: #007BFF;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s, color 0.2s;
}

.pagination button.number {
  width: 24px;
}

.pagination button.previous,
.pagination button.next {
  padding: 0 10px;
  width: 60px;
}

.pagination button:hover {
  background-color: #007BFF;
  color: white;
}

.pagination .active {
  background-color: #007BFF;
  color: white;
  border-color: #007BFF;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  padding: 10px;
  
}

.grid-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: #ffffff;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 16px;
  transition: transform 0.2s;
  height: 200px; 
  width: 150px; 
}

.grid-item:hover {
  transform: translateY(-5px);
}

.grid-item img {
  width: 100%;
  height: 200px; 
  object-fit: cover;
  border-radius: 8px;
  margin-bottom: 10px; 
}

.file-name {
  font-weight: bold;
  font-size: 16px;
  text-align: center;
  margin-bottom: 8px;
}

.update-date {
  color: #888;
  font-size: 14px;
  text-align: center;
}

.add-item {
  cursor: pointer;
  background-color: #f0f8ff;
  border: 2px dashed #007bff;
  text-align: center;
}
.add-item img {
  opacity: 0.6;
}
.add-item:hover img {
  opacity: 1;
}

================
File: frontend/src/pages/StudentDashboard/DashboardStudent/WorkManager.js
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./WorkManager.css";

function WorkManager() {
  const navigate = useNavigate();

  const dummyData = Array.from({ length: 40 }, (_, index) => ({
    id: index + 1,
    name: `File ${index + 1}`,
    date: `2024-11-${(index % 30) + 1}`,
    image: `https://picsum.photos/200/150?random=${index + 1}`,
  }));

  const [currentPage, setCurrentPage] = useState(1);
  const [searchText, setSearchText] = useState("");
  const [filter, setFilter] = useState("all");

  const itemsPerPage = 8;

  const filteredData = dummyData.filter((item) => {
    const matchesSearch = item.name.toLowerCase().includes(searchText.toLowerCase());
    const matchesFilter = filter === "all" || item.date.startsWith(filter);
    return matchesSearch && matchesFilter;
  });

  const totalPages = Math.ceil((filteredData.length + 1) / itemsPerPage);
  const paginatedData = [
    ...filteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage - 1),
    { id: "add", name: "Add New File", date: "", image: "https://via.placeholder.com/200x150?text=+" },
  ];

  const handlePrevious = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNext = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const handlePageClick = (page) => {
    setCurrentPage(page);
  };

  const handleImageClick = (id) => {
    if (id === "add") {
      navigate("/create"); 
    } else {
      navigate(`/student-dashboard/document-edit/${id}`); 
    }
  };
  

  const handleSearchChange = (event) => {
    setSearchText(event.target.value);
    setCurrentPage(1);
  };

  const handleFilterChange = (filterType) => {
    setFilter(filterType);
    setCurrentPage(1);
  };

  return (
    <div className="work-manager">
      <div className="top-actions">
        <div className="search-bar">
          <input
            type="text"
            placeholder="Search files..."
            value={searchText}
            onChange={handleSearchChange}
          />
        </div>
        <div className="filter-actions">
          <button onClick={() => handleFilterChange("all")}>All</button>
          <button onClick={() => handleFilterChange("2024-11-01")}>New</button>
          <button onClick={() => handleFilterChange("2024-11-30")}>Old</button>
          <button onClick={() => handleFilterChange("usual")}>Usual</button>
        </div>
      </div>
      <div className="grid-container">
        {paginatedData.map((item) => (
          <div
            key={item.id}
            className={`grid-item ${item.id === "add" ? "add-item" : ""}`}
            onClick={() => handleImageClick(item.id)}
          >
            <img src={item.image} alt={item.name} />
            <div className="file-name">{item.name}</div>
            <div className="update-date">{item.date}</div>
          </div>
        ))}
      </div>
      <div className="pagination">
        <button
          className="previous"
          onClick={handlePrevious}
          disabled={currentPage === 1}
        >
          Previous
        </button>
        {Array.from({ length: totalPages }, (_, index) => (
          <button
            key={index}
            className={`number ${currentPage === index + 1 ? "active" : ""}`}
            onClick={() => handlePageClick(index + 1)}
          >
            {index + 1}
          </button>
        ))}
        <button
          className="next"
          onClick={handleNext}
          disabled={currentPage === totalPages}
        >
          Next
        </button>
      </div>
    </div>
  );
}

export default WorkManager;

================
File: frontend/src/pages/StudentDashboard/Document/Document.css
================
.document-container {
    padding: 20px;
    background-color: #f9f9f9;
}

.document-header {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 10px; 
    justify-content: center;
}

.search-input {
    flex: 1;
    height: 36px;
    padding: 0 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
   
}

.filter-button{
    height: 36px;
    padding: 8px 15px;
    background-color: #007BFF; 
    color: white;
    border: none;
    margin-right: 20px;
    border-radius: 4px;
    cursor: pointer;
}
.reset-button,
.add-button {
    height: 36px;
    width: 36px;
    padding: 0 12px;
    border: none;
    border-radius: 4px;
    background-color: #007BFF;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
}

.filter-button:hover,
.reset-button:hover,
.add-button:hover {
    background-color: #0056b3;
}

.dropdown-menu {
    position: absolute;
    background-color: #e3f2fd;
    min-width: 160px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    z-index: 1;
}

.dropdown-menu button {
    width: 100%;
    padding: 8px 16px;
    background-color: #ffffff;
    border: none;
    cursor: pointer;
    text-align: left;
    color: #007BFF;
}

.dropdown-menu button:hover {
    background-color: #e1f5fe;
}

.document-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.document-table th,
.document-table td {
    padding: 10px;
    text-align: left;
    border: 1px solid #ccc;
}

.document-table th {
    background-color: #f1f1f1;
    font-weight: bold;
}

.document-table tr:nth-child(even) {
    background-color: #f9f9f9;
}

.document-table tr:hover {
    background-color: #f1f1f1;
}

.status {
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9rem;
    color: white;
}

.status.valid {
    background-color: #4CAF50;
}

.status.invalid {
    background-color: #f44336;
}

.status.pending {
    background-color: #ff9800;
}

================
File: frontend/src/pages/StudentDashboard/Document/Document.js
================
import React, { useState } from 'react';
import './Document.css';

function Document() {
  const [documents, setDocuments] = useState([
    { id: 1, title: "Hợp đồng lao động", updatedDate: "2023-11-01", expiryDate: "2025-11-01", dataType: "PDF", status: "Valid", selected: false },
    { id: 2, title: "Giấy chứng nhận", updatedDate: "2023-09-15", expiryDate: "2024-09-15", dataType: "Image", status: "Pending", selected: false },
    { id: 3, title: "Hóa đơn thanh toán", updatedDate: "2023-07-20", expiryDate: "2024-07-20", dataType: "Word", status: "Invalid", selected: false },
    { id: 4, title: "Báo cáo tài chính", updatedDate: "2023-05-10", expiryDate: "2024-05-10", dataType: "Excel", status: "Valid", selected: false },
    { id: 5, title: "Phiếu thu", updatedDate: "2023-10-01", expiryDate: "2024-10-01", dataType: "PDF", status: "Pending", selected: false },
  ]);

  const [filters, setFilters] = useState({ sort: "", type: "" });
  const [searchQuery, setSearchQuery] = useState("");
  const [showSortMenu, setShowSortMenu] = useState(false);
  const [showTypeMenu, setShowTypeMenu] = useState(false);

  const handleSearchChange = (e) => {
    setSearchQuery(e.target.value);
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const filteredDocuments = documents
    .filter((doc) => doc.title.toLowerCase().includes(searchQuery.toLowerCase()))
    .filter((doc) => {
      if (filters.type && filters.type !== "all" && doc.dataType.toLowerCase() !== filters.type) {
        return false;
      }
      return true;
    })
    .sort((a, b) => {
      if (filters.sort === "newest") {
        return new Date(b.updatedDate) - new Date(a.updatedDate);
      } else if (filters.sort === "oldest") {
        return new Date(a.updatedDate) - new Date(b.updatedDate);
      }
      return 0;
    });

  const toggleSelectAll = (e) => {
    const isChecked = e.target.checked;
    setDocuments((prev) =>
      prev.map((doc) => ({ ...doc, selected: isChecked })));
  };

  const toggleSelectDocument = (id, selected) => {
    setDocuments((prev) =>
      prev.map((doc) =>
        doc.id === id ? { ...doc, selected } : doc
      ));
  };

  return (
    <div className="document-container">
      
      <div className="document-header">
        <input
          type="text"
          className="search-input"
          placeholder="Search documents"
          value={searchQuery}
          onChange={handleSearchChange}
        />

        
        <div className="filter-dropdown">
          <button
            className="filter-button"
            onClick={() => setShowSortMenu(!showSortMenu)}
          >
            Sort by Date
          </button>
          {showSortMenu && (
            <div className="dropdown-menu">
              <button onClick={(e) => handleFilterChange(e)} name="sort" value="newest">Newest First</button>
              <button onClick={(e) => handleFilterChange(e)} name="sort" value="oldest">Oldest First</button>
            </div>
          )}
        </div>

        
        <div className="filter-dropdown">
          <button
            className="filter-button"
            onClick={() => setShowTypeMenu(!showTypeMenu)}
          >
            Document Type
          </button>
          {showTypeMenu && (
            <div className="dropdown-menu">
              <button onClick={(e) => handleFilterChange(e)} name="type" value="pdf">PDF</button>
              <button onClick={(e) => handleFilterChange(e)} name="type" value="word">Word</button>
              <button onClick={(e) => handleFilterChange(e)} name="type" value="excel">Excel</button>
              <button onClick={(e) => handleFilterChange(e)} name="type" value="image">Image</button>
              <button onClick={(e) => handleFilterChange(e)} name="type" value="all">All Types</button>
            </div>
          )}
        </div>

        
        <button
          className="reset-button"
          onClick={() => {
            setFilters({ sort: "", type: "" });
            setSearchQuery(""); 
          }}
        >
          Reset
        </button>

        <button className="add-button">+</button>
      </div>

      {/* Table */}
      <table className="document-table">
        <thead>
          <tr>
            <th>
              <input type="checkbox" onChange={toggleSelectAll} />
            </th>
            <th>Tên giấy tờ</th>
            <th>Ngày cập nhật</th>
            <th>Ngày hết hạn</th>
            <th>Loại dữ liệu</th>
            <th>Tình trạng</th>
          </tr>
        </thead>
        <tbody>
          {filteredDocuments.map((doc) => (
            <tr key={doc.id}>
              <td>
                <input
                  type="checkbox"
                  checked={doc.selected}
                  onChange={(e) => toggleSelectDocument(doc.id, e.target.checked)}
                />
              </td>
              <td>{doc.title}</td>
              <td>{doc.updatedDate}</td>
              <td>{doc.expiryDate}</td>
              <td>{doc.dataType}</td>
              <td>
                <span className={`status ${doc.status.toLowerCase()}`}>
                  {doc.status}
                </span>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Document;

================
File: frontend/src/pages/StudentDashboard/Information/api.js
================
export const fetchInformation = () => {
    
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          student: {
            name: 'Nguyễn Văn A',
            internshipTopic: 'Phát triển ứng dụng web',
            university: 'Trường Đại học ABC',
            email: 'nguyen.vana@abc.com',
          },
          internalSupervisor: {
            name: 'Nguyễn Thị B',
            department: 'Khoa CNTT, Trường Đại học ABC',
            email: 'nguyen.thib@abc.edu.vn',
            phone: '0901234567',
          },
          externalSupervisor: {
            name: 'Lê Văn C',
            company: 'Công ty XYZ',
            email: 'le.vanc@xyz.com',
            position: 'Trưởng phòng phát triển phần mềm',
          },
          company: {
            name: 'Công ty XYZ',
            address: '123 Đường ABC, Quận 1, TP.HCM',
            email: 'contact@xyz.com',
            phone: '028-12345678',
          },
        });
      }, 1000); 
    });
  };

================
File: frontend/src/pages/StudentDashboard/Information/CompanyDetail.css
================
/* CompanyDetail.css */

/* Khung tổng thể cho toàn bộ chi tiết công ty */
.company-detail {
  max-width: 900px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Tiêu đề chính */
.company-detail h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

/* Định dạng các thông tin chi tiết công ty */
.company-detail p {
  font-size: 16px;
  line-height: 1.6;
  margin-bottom: 10px;
}

/* Danh sách giấy tờ liên quan */
.document-container {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.document {
  cursor: pointer;
  border-radius: 8px;
  border: 1px solid #ddd;
  overflow: hidden;
  width: 250px;
  text-align: center;
}

.document img {
  width: 100%;
  height: 170px;
  object-fit: cover;
}

.document p {
  padding: 10px;
  background-color: #f4f4f4;
  font-weight: bold;
  color: #333;
}

.document:hover {
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

================
File: frontend/src/pages/StudentDashboard/Information/CompanyDetail.js
================
import React from 'react';
import { Link } from 'react-router-dom';

function CompanyDetail() {
  return (
    <div className="company-detail">
      <h2>Chi tiết thông tin công ty</h2>
      <p><strong>Tên công ty:</strong> Công ty ABC</p>
      <p><strong>Địa chỉ:</strong> 123 Đường ABC, Quận 1, TP.HCM</p>
      <p><strong>Email:</strong> contact@abc.com</p>
      <p><strong>Số điện thoại:</strong> 0987654321</p>

      <h3>Giấy tờ liên quan</h3>
      <div className="document-container">
        <div className="document">
          <Link to="/dashboard/previewdocument/document1">
            <img src="https://via.placeholder.com/250x170?text=Document1" alt="Giấy tờ 1" />
            <p>Giấy tờ 1</p>
          </Link>
        </div>
        <div className="document">
          <Link to="/dashboard/previewdocument/document2">
            <img src="https://via.placeholder.com/250x170?text=Document2" alt="Giấy tờ 2" />
            <p>Giấy tờ 2</p>
          </Link>
        </div>
      </div>
    </div>
  );
}

export default CompanyDetail;

================
File: frontend/src/pages/StudentDashboard/Information/ExternalSupervisorDetail.css
================
/* ExternalSupervisorDetail.css */

/* Khung tổng thể cho toàn bộ chi tiết giám sát viên ngoại bộ */
.external--detail {
  max-width: 900px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Tiêu đề chính */
.external--detail h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

/* Định dạng các thông tin chi tiết giám sát viên */
.external--detail p {
  font-size: 16px;
  line-height: 1.6;
  margin-bottom: 10px;
}

/* Danh sách giấy tờ liên quan */
.document-container {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.document {
  cursor: pointer;
  border-radius: 8px;
  border: 1px solid #ddd;
  overflow: hidden;
  width: 250px;
  text-align: center;
}

.document img {
  width: 100%;
  height: 170px;
  object-fit: cover;
}

.document p {
  padding: 10px;
  background-color: #f4f4f4;
  font-weight: bold;
  color: #333;
}

.document:hover {
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

================
File: frontend/src/pages/StudentDashboard/Information/ExternalSupervisorDetail.js
================
import React from 'react';
import './ExternalSupervisorDetail.css';

function ExternalSupervisorDetail() {
  const handlePreview = (fileType) => {
    // Điều hướng đến trang preview của tài liệu
    window.location.href = `/preview/${fileType}`;
  };

  return (
    <div className="external--detail">
      <h2>Chi tiết thông tin giám sát viên ngoại bộ</h2>
      <p><strong>Tên:</strong> Ông John Doe</p>
      <p><strong>Đơn vị công tác:</strong> Công ty XYZ</p>
      <p><strong>Email:</strong> johndoe@company.com</p>
      <p><strong>Chức vụ:</strong> Giám đốc</p>
      <p><strong>Số điện thoại:</strong> 0987654321</p>

      <h3>Giấy tờ liên quan</h3>
      <div className="document-container">
        <div className="document" onClick={() => handlePreview('document1')}>
          <img src="https://via.placeholder.com/250x170?text=Document1" alt="Giấy tờ 1" />
          
        </div>
        <div className="document" onClick={() => handlePreview('document2')}>
          <img src="https://via.placeholder.com/250x170?text=Document2" alt="Giấy tờ 2" />
          
        </div>
      </div>
    </div>
  );
}

export default ExternalSupervisorDetail;

================
File: frontend/src/pages/StudentDashboard/Information/Information.css
================
.information-container {
    width: 80%;
    margin: 0 auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    font-family: Arial, sans-serif;
  }
  
  h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
  }
  
  .info-section {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
  }
  
  .info-section h3 {
    margin-bottom: 15px;
    color: #555;
  }
  
  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #555;
  }
  
  input[type="text"],
  input[type="date"],
  input[type="email"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-sizing: border-box;
    font-size: 14px;
    color: #333;
  }
  
  input[type="text"]:focus,
  input[type="date"]:focus,
  input[type="email"]:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
  }
  
  button {
    display: inline-block;
    padding: 10px 20px;
    background-color: #007bff;
    color: #fff;
    font-size: 14px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  button:hover {
    background-color: #0056b3;
  }
  
  @media (max-width: 768px) {
    .information-container {
      width: 95%;
      padding: 15px;
    }
  
    input[type="text"],
    input[type="date"],
    input[type="email"] {
      font-size: 12px;
    }
  }

================
File: frontend/src/pages/StudentDashboard/Information/Information.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Information.css';

function Information() {
  const [info] = useState({
    student: {
      name: "Nguyễn Văn A",
      internshipTopic: "Phát triển ứng dụng web",
      university: "Đại học Công Nghệ",
      email: "nguyenvana@example.com"
    },
    internalSupervisor: {
      name: "ThS. Nguyễn Văn B",
      department: "Khoa Công nghệ thông tin",
      email: "nguyenvanb@example.com",
      phone: "0123456789"
    },
    externalSupervisor: {
      name: "Ông John Doe",
      company: "Công ty XYZ",
      email: "johndoe@company.com",
      position: "Giám đốc"
    },
    company: {
      name: "Công ty ABC",
      address: "123 Đường ABC, Quận 1, TP.HCM",
      email: "contact@abc.com",
      phone: "0987654321"
    }
  });

  const navigate = useNavigate();

 
  const handleViewMore = (section) => {
    navigate(`/student-dashboard/${section}-detail`);
  };
  
  

  const sections = [
    { title: "Thông tin sinh viên", data: info.student, section: "student" },
    { title: "Thông tin giám sát viên nội bộ", data: info.internalSupervisor, section: "internal" },
    { title: "Thông tin giám sát viên ngoại bộ", data: info.externalSupervisor, section: "external" },
    { title: "Thông tin công ty", data: info.company, section: "company" }
  ];

  return (
    <div className="information-container">
      <h2>Thông tin thực tập</h2>

      {sections.map(({ title, data, section }) => (
        <div key={section} className="info-section">
          <h3>{title}</h3>
          {Object.entries(data).map(([key, value]) => (
            <p key={key}><strong>{key.replace(/([A-Z])/g, ' $1')}:</strong> {value}</p>
          ))}
          <button onClick={() => handleViewMore(section)}>View More</button>
        </div>
      ))}
    </div>
  );
}

export default Information;

================
File: frontend/src/pages/StudentDashboard/Information/InternalSupervisorDetail.css
================
/* InternalSupervisorDetail.css */

/* Khung tổng thể cho toàn bộ chi tiết giám sát viên nội bộ */
.internal-detail {
  max-width: 900px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Tiêu đề chính */
.internal-detail h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

/* Định dạng các thông tin chi tiết giám sát viên */
.internal-detail p {
  font-size: 16px;
  line-height: 1.6;
  margin-bottom: 10px;
}

/* Danh sách giấy tờ liên quan */
.document-container {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.document {
  cursor: pointer;
  border-radius: 8px;
  border: 1px solid #ddd;
  overflow: hidden;
  width: 250px;
  text-align: center;
}

.document img {
  width: 100%;
  height: 170px;
  object-fit: cover;
}

.document p {
  padding: 10px;
  background-color: #f4f4f4;
  font-weight: bold;
  color: #333;
}

.document:hover {
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

================
File: frontend/src/pages/StudentDashboard/Information/InternalSupervisorDetail.js
================
import React from 'react';
import './InternalSupervisorDetail.css';

function InternalSupervisorDetail() {
  const handlePreview = (fileType) => {
    // Điều hướng đến trang preview của tài liệu
    window.location.href = `/preview/${fileType}`;
  };

  return (
    <div className="internal-detail">
      <h2>Chi tiết thông tin giám sát viên nội bộ</h2>
      <p><strong>Tên:</strong> ThS. Nguyễn Văn B</p>
      <p><strong>Đơn vị công tác:</strong> Khoa Công nghệ thông tin</p>
      <p><strong>Email:</strong> nguyenvanb@example.com</p>
      <p><strong>Điện thoại:</strong> 0123456789</p>

      <h3>Giấy tờ liên quan</h3>
      <div className="document-container">
        <div className="document" onClick={() => handlePreview('document1')}>
          <img src="https://via.placeholder.com/250x170?text=Document1" alt="Giấy tờ 1" />
          <p>Giấy tờ 1</p>
        </div>
        <div className="document" onClick={() => handlePreview('document2')}>
          <img src="https://via.placeholder.com/250x170?text=Document2" alt="Giấy tờ 2" />
          <p>Giấy tờ 2</p>
        </div>
      </div>
    </div>
  );
}

export default InternalSupervisorDetail;

================
File: frontend/src/pages/StudentDashboard/Information/StudentDetail.css
================
.student-detail {
  max-width: 900px;  
  margin: 20px auto; 
  padding: 20px;
  border: 1px solid #ccc;  
  border-radius: 8px;  
  background-color: #f9f9f9;  
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); 
}


.student-detail h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}


.student-detail p {
  font-size: 16px;
  line-height: 1.6;
  margin-bottom: 10px;
}


.document-container {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.document {
  cursor: pointer;
  border-radius: 8px;
  border: 1px solid #ddd;
  overflow: hidden;
  width: 250px;
  text-align: center;
}

.document img {
  width: 100%;  
  height: 170px;  
  object-fit: cover;
}

.document p {
  padding: 10px;
  background-color: #f4f4f4;
  font-weight: bold;
  color: #333;
}

.document:hover {
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

================
File: frontend/src/pages/StudentDashboard/Information/StudentDetail.js
================
import React from 'react';
import './StudentDetail.css';

function StudentDetail() {
  const handlePreview = (fileType) => {
    
    window.location.href = `/preview/${fileType}`;
  };

  return (
    <div className="student-detail">
      <h2>Chi tiết thông tin sinh viên</h2>
      <p><strong>Tên:</strong> Nguyễn Văn A</p>
      <p><strong>Ngày sinh:</strong> 01/01/2000</p>
      <p><strong>Khoa:</strong> Công nghệ thông tin</p>
      <p><strong>Ngành:</strong> Phát triển phần mềm</p>
      <p><strong>Số điện thoại:</strong> 0123456789</p>
      <p><strong>Email:</strong> nguyenvana@example.com</p>
      <p><strong>Thời gian thực tập:</strong> 01/06/2024 - 31/08/2024</p>
      <p><strong>Chủ đề thực tập:</strong> Phát triển ứng dụng web</p>

      <h3>Giấy tờ liên quan</h3>
      <div className="document-container">
        <div className="document" onClick={() => handlePreview('document1')}>
          <img src="https://via.placeholder.com/250x170?text=Document1" alt="Giấy tờ 1" />
        
        </div>
        <div className="document" onClick={() => handlePreview('document2')}>
          <img src="https://via.placeholder.com/250x170?text=Document2" alt="Giấy tờ 2" />
          
        </div>
      </div>

      
    </div>
  );
}

export default StudentDetail;

================
File: frontend/src/pages/StudentDashboard/PreviewDocument/PreviewDocument.js
================
import React from 'react';
import { useParams } from 'react-router-dom';

function PreviewDocument() {
  const { documentId } = useParams();  

  return (
    <div>
      <h2>Xem trước tài liệu: {documentId}</h2>
      
      <div>
        {documentId === 'document1' && (
          <div>
            <h3>Giấy tờ 1 - PDF Viewer</h3>
            <embed src="/path/to/document1.pdf" width="100%" height="600px" />
          </div>
        )}
        {documentId === 'document2' && (
          <div>
            <h3>Giấy tờ 2 - PDF Viewer</h3>
            <embed src="/path/to/document2.pdf" width="100%" height="600px" />
          </div>
        )}
       
      </div>
    </div>
  );
}

export default PreviewDocument;

================
File: frontend/src/pages/StudentDashboard/Setting/Setting.css
================
.setting-container {
    margin-left: 20px;
    margin-right: 20px;
    padding: 30px;
    
    background-color: #f4f7fc;
  }
  
  h1 {
    font-size: 24px;
    color: #023164;
    margin-bottom: 20px;
  }
  
  .user-info {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .avatar-container {
    margin-right: 20px;
  }
  
  .avatar {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .info {
    flex: 1;
  }
  
  .info h2 {
    font-size: 20px;
    color: #023164;
  }
  
  .info p {
    font-size: 16px;
    color: #666;
  }
  
  

  button {
    padding: 10px 20px;
    background-color: #023164;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #1e4d8d;
  }
  
  /* Cài đặt hệ thống */
  .system-settings {
    margin-top: 30px;
  }
  
  .setting-item {
    margin-bottom: 15px;
  }
  
  .setting-item button {
    padding: 10px 20px;
    background-color: #023164;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
    text-align: left;
    font-size: 24px;
    
  }
  
  .setting-item button:hover {
    background-color: #1e4d8d;
  }
  
  .dropdown {
    margin-top: 10px;
    padding-left: 20px;
    background-color: #f1f1f1;
    border-left: 4px solid #023164;
  }
  
  .dropdown p {
    font-size: 14px;
    color: #555;
    margin: 8px 0;
    
    font-size: 20px;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .user-info {
      flex-direction: column;
      align-items: flex-start;
    }
  
    .avatar-container {
      margin-bottom: 10px;
    }
  
    .info h2 {
      font-size: 18px;
    }
  
    .info p {
      font-size: 14px;
    }
  
    .system-settings {
      margin-top: 20px;
    }
  }

================
File: frontend/src/pages/StudentDashboard/Setting/Setting.js
================
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Setting.css";

function Setting() {
  const navigate = useNavigate();

  // Thông tin người dùng cập nhật
  const userInfo = {
    name: "Phan Đăng Nhân",
    dob: "19/08/2003",
    studentId: "BI12-336",
    department: "Công nghệ thông tin",
    course: "Công nghệ thông tin và truyền thông",
    email: "nhandangphan1908@gmail.com",
    phone: "0353473186",
    avatar: "https://via.placeholder.com/150", 
  };

  const [isSettingsOpen, setSettingsOpen] = useState(false);
  const [isHelpOpen, setHelpOpen] = useState(false);
  const [isScreenOpen, setScreenOpen] = useState(false);

  const toggleSettings = () => setSettingsOpen(!isSettingsOpen);
  const toggleHelp = () => setHelpOpen(!isHelpOpen);
  const toggleScreen = () => setScreenOpen(!isScreenOpen);

  return (
    <div className="setting-container">
      <h1>Cài đặt</h1>
      <div className="user-info">
        <div className="avatar-container">
          <img src={userInfo.avatar} alt="Avatar" className="avatar" />
        </div>
        <div className="info">
          <h2>{userInfo.name}</h2>
          <p><strong>Ngày sinh:</strong> {userInfo.dob}</p>
          <p><strong>Mã sinh viên:</strong> {userInfo.studentId}</p>
          <p><strong>Khoa:</strong> {userInfo.department}</p>
          <p><strong>Ngành:</strong> {userInfo.course}</p>
          <p><strong>Email:</strong> {userInfo.email}</p>
          <p><strong>Số điện thoại:</strong> {userInfo.phone}</p>
          <button onClick={() => navigate("/student-dashboard/setting/update-info")}>
            Cập nhật thông tin
          </button>
        </div>
      </div>

      
      <div className="system-settings">
        <div className="setting-item">
          <button onClick={toggleSettings}>Cài đặt</button>
          {isSettingsOpen && (
            <div className="dropdown">
              <p>Cài đặt hệ thống</p>
              <p>Ngôn ngữ</p>
            </div>
          )}
        </div>

        <div className="setting-item">
          <button onClick={toggleHelp}>Trợ giúp</button>
          {isHelpOpen && (
            <div className="dropdown">
              <p>Trung tâm trợ giúp</p>
              <p>Báo cáo</p>
            </div>
          )}
        </div>

        <div className="setting-item">
          <button onClick={toggleScreen}>Màn hình</button>
          {isScreenOpen && (
            <div className="dropdown">
              <p>Chế độ tối</p>
              <p>Bàn phím</p>
            </div>
          )}
        </div>

        <div className="setting-item">
          <button onClick={() => navigate("/")}>Đăng xuất</button>
        </div>
      </div>
    </div>
  );
}

export default Setting;

================
File: frontend/src/pages/StudentDashboard/Setting/UpdateInfo.css
================
.update-info-container {
    padding: 20px;
  }
  
  form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  input {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  button {
    padding: 10px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

================
File: frontend/src/pages/StudentDashboard/Setting/UpdateInfo.js
================
import React, { useState } from "react";
import "./UpdateInfo.css";

function UpdateInfo() {
  const [formData, setFormData] = useState({
    name: "John Doe", 
    dob: "",
    studentId: "",
    department: "",
    course: "",
    email: "example@example.com",
    phone: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Thông tin cập nhật:", formData);
    alert("Cập nhật thành công!");
  };

  return (
    <div className="update-info-container">
      <h1>Cập nhật thông tin</h1>
      <form onSubmit={handleSubmit}>
        <label>Họ và Tên</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
        
        <label>Ngày sinh</label>
        <input
          type="date"
          name="dob"
          value={formData.dob}
          onChange={handleChange}
        />
        
        <label>Mã sinh viên</label>
        <input
          type="text"
          name="studentId"
          value={formData.studentId}
          onChange={handleChange}
        />
        
        <label>Khoa</label>
        <input
          type="text"
          name="department"
          value={formData.department}
          onChange={handleChange}
        />
        
        <label>Khóa học</label>
        <input
          type="text"
          name="course"
          value={formData.course}
          onChange={handleChange}
        />
        
        <label>Email (không thay đổi)</label>
        <input type="email" name="email" value={formData.email} readOnly />
        
        <label>Số điện thoại</label>
        <input
          type="text"
          name="phone"
          value={formData.phone}
          onChange={handleChange}
        />

        <button type="submit">Lưu thông tin</button>
      </form>
    </div>
  );
}

export default UpdateInfo;

================
File: frontend/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: frontend/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: frontend/src/test.js
================
const email = 'test@example.com';
const password = 'password123';
console.log(email, password);
